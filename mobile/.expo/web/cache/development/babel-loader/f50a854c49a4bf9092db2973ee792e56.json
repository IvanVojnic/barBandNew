{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { ScreenStackHeaderBackButtonImage, ScreenStackHeaderCenterView, ScreenStackHeaderConfig, ScreenStackHeaderLeftView, ScreenStackHeaderRightView } from 'react-native-screens';\nimport { processFonts } from \"./FontProcessor\";\nexport default function HeaderConfig(_ref) {\n  var backButtonImage = _ref.backButtonImage,\n      backButtonInCustomView = _ref.backButtonInCustomView,\n      direction = _ref.direction,\n      headerBackTitle = _ref.headerBackTitle,\n      _ref$headerBackTitleS = _ref.headerBackTitleStyle,\n      headerBackTitleStyle = _ref$headerBackTitleS === void 0 ? {} : _ref$headerBackTitleS,\n      _ref$headerBackTitleV = _ref.headerBackTitleVisible,\n      headerBackTitleVisible = _ref$headerBackTitleV === void 0 ? true : _ref$headerBackTitleV,\n      headerCenter = _ref.headerCenter,\n      headerHideBackButton = _ref.headerHideBackButton,\n      headerHideShadow = _ref.headerHideShadow,\n      _ref$headerLargeStyle = _ref.headerLargeStyle,\n      headerLargeStyle = _ref$headerLargeStyle === void 0 ? {} : _ref$headerLargeStyle,\n      headerLargeTitle = _ref.headerLargeTitle,\n      headerLargeTitleHideShadow = _ref.headerLargeTitleHideShadow,\n      _ref$headerLargeTitle = _ref.headerLargeTitleStyle,\n      headerLargeTitleStyle = _ref$headerLargeTitle === void 0 ? {} : _ref$headerLargeTitle,\n      headerLeft = _ref.headerLeft,\n      headerRight = _ref.headerRight,\n      headerShown = _ref.headerShown,\n      _ref$headerStyle = _ref.headerStyle,\n      headerStyle = _ref$headerStyle === void 0 ? {} : _ref$headerStyle,\n      headerTintColor = _ref.headerTintColor,\n      headerTitle = _ref.headerTitle,\n      _ref$headerTitleStyle = _ref.headerTitleStyle,\n      headerTitleStyle = _ref$headerTitleStyle === void 0 ? {} : _ref$headerTitleStyle,\n      _ref$headerTopInsetEn = _ref.headerTopInsetEnabled,\n      headerTopInsetEnabled = _ref$headerTopInsetEn === void 0 ? true : _ref$headerTopInsetEn,\n      headerTranslucent = _ref.headerTranslucent,\n      route = _ref.route,\n      screenOrientation = _ref.screenOrientation,\n      statusBarAnimation = _ref.statusBarAnimation,\n      statusBarHidden = _ref.statusBarHidden,\n      statusBarStyle = _ref.statusBarStyle,\n      title = _ref.title;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var tintColor = headerTintColor !== null && headerTintColor !== void 0 ? headerTintColor : colors.primary;\n\n  var _processFonts = processFonts([headerBackTitleStyle.fontFamily, headerLargeTitleStyle.fontFamily, headerTitleStyle.fontFamily]),\n      _processFonts2 = _slicedToArray(_processFonts, 3),\n      backTitleFontFamily = _processFonts2[0],\n      largeTitleFontFamily = _processFonts2[1],\n      titleFontFamily = _processFonts2[2];\n\n  return React.createElement(ScreenStackHeaderConfig, {\n    backButtonInCustomView: backButtonInCustomView,\n    backgroundColor: headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card,\n    backTitle: headerBackTitleVisible ? headerBackTitle : ' ',\n    backTitleFontFamily: backTitleFontFamily,\n    backTitleFontSize: headerBackTitleStyle.fontSize,\n    blurEffect: headerStyle.blurEffect,\n    color: tintColor,\n    direction: direction,\n    hidden: headerShown === false,\n    hideBackButton: headerHideBackButton,\n    hideShadow: headerHideShadow,\n    largeTitle: headerLargeTitle,\n    largeTitleBackgroundColor: headerLargeStyle.backgroundColor,\n    largeTitleColor: headerLargeTitleStyle.color,\n    largeTitleFontFamily: largeTitleFontFamily,\n    largeTitleFontSize: headerLargeTitleStyle.fontSize,\n    largeTitleFontWeight: headerLargeTitleStyle.fontWeight,\n    largeTitleHideShadow: headerLargeTitleHideShadow,\n    screenOrientation: screenOrientation,\n    statusBarAnimation: statusBarAnimation,\n    statusBarHidden: statusBarHidden,\n    statusBarStyle: statusBarStyle,\n    title: headerTitle !== undefined ? headerTitle : title !== undefined ? title : route.name,\n    titleColor: headerTitleStyle.color !== undefined ? headerTitleStyle.color : headerTintColor !== undefined ? headerTintColor : colors.text,\n    titleFontFamily: titleFontFamily,\n    titleFontSize: headerTitleStyle.fontSize,\n    titleFontWeight: headerTitleStyle.fontWeight,\n    topInsetEnabled: headerTopInsetEnabled,\n    translucent: headerTranslucent === true\n  }, headerRight !== undefined ? React.createElement(ScreenStackHeaderRightView, null, headerRight({\n    tintColor: tintColor\n  })) : null, backButtonImage !== undefined ? React.createElement(ScreenStackHeaderBackButtonImage, {\n    key: \"backImage\",\n    source: backButtonImage\n  }) : null, headerLeft !== undefined ? React.createElement(ScreenStackHeaderLeftView, null, headerLeft({\n    tintColor: tintColor\n  })) : null, headerCenter !== undefined ? React.createElement(ScreenStackHeaderCenterView, null, headerCenter({\n    tintColor: tintColor\n  })) : null);\n}","map":{"version":3,"sources":["HeaderConfig.tsx"],"names":["headerBackTitleStyle","headerBackTitleVisible","headerLargeStyle","headerLargeTitleStyle","headerStyle","headerTitleStyle","headerTopInsetEnabled","title","colors","useTheme","tintColor","headerTintColor","processFonts","headerShown","headerTitle","route","headerTranslucent","headerRight","backButtonImage","headerLeft","headerCenter"],"mappings":"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","sourcesContent":["import { Route, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n} from 'react-native-screens';\nimport { NativeStackNavigationOptions } from '../types';\nimport { processFonts } from './FontProcessor';\n\ntype Props = NativeStackNavigationOptions & {\n  route: Route<string>;\n};\n\nexport default function HeaderConfig({\n  backButtonImage,\n  backButtonInCustomView,\n  direction,\n  headerBackTitle,\n  headerBackTitleStyle = {},\n  headerBackTitleVisible = true,\n  headerCenter,\n  headerHideBackButton,\n  headerHideShadow,\n  headerLargeStyle = {},\n  headerLargeTitle,\n  headerLargeTitleHideShadow,\n  headerLargeTitleStyle = {},\n  headerLeft,\n  headerRight,\n  headerShown,\n  headerStyle = {},\n  headerTintColor,\n  headerTitle,\n  headerTitleStyle = {},\n  headerTopInsetEnabled = true,\n  headerTranslucent,\n  route,\n  screenOrientation,\n  statusBarAnimation,\n  statusBarHidden,\n  statusBarStyle,\n  title,\n}: Props): JSX.Element {\n  const { colors } = useTheme();\n  const tintColor = headerTintColor ?? colors.primary;\n\n  const [\n    backTitleFontFamily,\n    largeTitleFontFamily,\n    titleFontFamily,\n  ] = processFonts([\n    headerBackTitleStyle.fontFamily,\n    headerLargeTitleStyle.fontFamily,\n    headerTitleStyle.fontFamily,\n  ]);\n\n  return (\n    <ScreenStackHeaderConfig\n      backButtonInCustomView={backButtonInCustomView}\n      backgroundColor={\n        headerStyle.backgroundColor ? headerStyle.backgroundColor : colors.card\n      }\n      backTitle={headerBackTitleVisible ? headerBackTitle : ' '}\n      backTitleFontFamily={backTitleFontFamily}\n      backTitleFontSize={headerBackTitleStyle.fontSize}\n      blurEffect={headerStyle.blurEffect}\n      color={tintColor}\n      direction={direction}\n      hidden={headerShown === false}\n      hideBackButton={headerHideBackButton}\n      hideShadow={headerHideShadow}\n      largeTitle={headerLargeTitle}\n      largeTitleBackgroundColor={headerLargeStyle.backgroundColor}\n      largeTitleColor={headerLargeTitleStyle.color}\n      largeTitleFontFamily={largeTitleFontFamily}\n      largeTitleFontSize={headerLargeTitleStyle.fontSize}\n      largeTitleFontWeight={headerLargeTitleStyle.fontWeight}\n      largeTitleHideShadow={headerLargeTitleHideShadow}\n      screenOrientation={screenOrientation}\n      statusBarAnimation={statusBarAnimation}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      title={\n        headerTitle !== undefined\n          ? headerTitle\n          : title !== undefined\n          ? title\n          : route.name\n      }\n      titleColor={\n        headerTitleStyle.color !== undefined\n          ? headerTitleStyle.color\n          : headerTintColor !== undefined\n          ? headerTintColor\n          : colors.text\n      }\n      titleFontFamily={titleFontFamily}\n      titleFontSize={headerTitleStyle.fontSize}\n      titleFontWeight={headerTitleStyle.fontWeight}\n      topInsetEnabled={headerTopInsetEnabled}\n      translucent={headerTranslucent === true}>\n      {headerRight !== undefined ? (\n        <ScreenStackHeaderRightView>\n          {headerRight({ tintColor })}\n        </ScreenStackHeaderRightView>\n      ) : null}\n      {backButtonImage !== undefined ? (\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={backButtonImage}\n        />\n      ) : null}\n      {headerLeft !== undefined ? (\n        <ScreenStackHeaderLeftView>\n          {headerLeft({ tintColor })}\n        </ScreenStackHeaderLeftView>\n      ) : null}\n      {headerCenter !== undefined ? (\n        <ScreenStackHeaderCenterView>\n          {headerCenter({ tintColor })}\n        </ScreenStackHeaderCenterView>\n      ) : null}\n    </ScreenStackHeaderConfig>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}