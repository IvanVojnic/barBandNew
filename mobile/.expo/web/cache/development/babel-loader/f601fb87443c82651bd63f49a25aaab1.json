{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar getDevServer = require(\"./getDevServer\");\n\nimport NativeSourceCode from \"../../NativeModules/specs/NativeSourceCode\";\nvar fetch;\n\nfunction isSourcedFromDisk(sourcePath) {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nfunction symbolicateStackTrace(stack) {\n  var devServer, stackCopy, _NativeSourceCode$get, scriptURL, foundInternalSource, response;\n\n  return _regeneratorRuntime.async(function symbolicateStackTrace$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!fetch) {\n            fetch = global.fetch || require(\"../../Network/fetch\").fetch;\n          }\n\n          devServer = getDevServer();\n\n          if (devServer.bundleLoadedFromServer) {\n            _context.next = 4;\n            break;\n          }\n\n          throw new Error('Bundle was not loaded from the packager');\n\n        case 4:\n          stackCopy = stack;\n          _NativeSourceCode$get = NativeSourceCode.getConstants(), scriptURL = _NativeSourceCode$get.scriptURL;\n\n          if (scriptURL) {\n            foundInternalSource = false;\n            stackCopy = stack.map(function (frame) {\n              if (frame.file == null) {\n                return frame;\n              }\n\n              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n                return _objectSpread(_objectSpread({}, frame), {}, {\n                  file: scriptURL\n                });\n              }\n\n              foundInternalSource = true;\n              return frame;\n            });\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {\n            method: 'POST',\n            body: JSON.stringify({\n              stack: stackCopy\n            })\n          }));\n\n        case 9:\n          response = _context.sent;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 12:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nmodule.exports = symbolicateStackTrace;","map":{"version":3,"names":["getDevServer","require","NativeSourceCode","fetch","isSourcedFromDisk","sourcePath","test","symbolicateStackTrace","stack","global","devServer","bundleLoadedFromServer","Error","stackCopy","getConstants","scriptURL","foundInternalSource","map","frame","file","url","method","body","JSON","stringify","response","json","module","exports"],"sources":["D:/проекты летом 2022/loginapp2/mobile/node_modules/react-native/Libraries/Core/Devtools/symbolicateStackTrace.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getDevServer = require('./getDevServer');\n\nimport NativeSourceCode from '../../NativeModules/specs/NativeSourceCode';\n\n// Avoid requiring fetch on load of this module; see symbolicateStackTrace\nlet fetch;\n\nimport type {StackFrame} from '../NativeExceptionsManager';\n\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n|}>;\n\nexport type SymbolicatedStackTrace = $ReadOnly<{|\n  stack: Array<StackFrame>,\n  codeFrame: ?CodeFrame,\n|}>;\n\nfunction isSourcedFromDisk(sourcePath: string): boolean {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nasync function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n): Promise<SymbolicatedStackTrace> {\n  // RN currently lazy loads whatwg-fetch using a custom fetch module, which,\n  // when called for the first time, requires and re-exports 'whatwg-fetch'.\n  // However, when a dependency of the project tries to require whatwg-fetch\n  // either directly or indirectly, whatwg-fetch is required before\n  // RN can lazy load whatwg-fetch. As whatwg-fetch checks\n  // for a fetch polyfill before loading, it will in turn try to load\n  // RN's fetch module, which immediately tries to import whatwg-fetch AGAIN.\n  // This causes a circular require which results in RN's fetch module\n  // exporting fetch as 'undefined'.\n  // The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.\n  // At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.\n  if (!fetch) {\n    fetch = global.fetch || require('../../Network/fetch').fetch;\n  }\n\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from the packager');\n  }\n\n  let stackCopy = stack;\n\n  const {scriptURL} = NativeSourceCode.getConstants();\n  if (scriptURL) {\n    let foundInternalSource: boolean = false;\n    stackCopy = stack.map((frame: StackFrame) => {\n      if (frame.file == null) {\n        return frame;\n      }\n\n      // If the sources exist on disk rather than appearing to come from the packager,\n      // replace the location with the packager URL until we reach an internal source\n      // which does not have a path (no slashes), indicating a switch from within\n      // the application to a surrounding debugging environment.\n      if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n        // Copy frame into new object and replace 'file' property\n        return {...frame, file: scriptURL};\n      }\n\n      foundInternalSource = true;\n      return frame;\n    });\n  }\n\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack: stackCopy}),\n  });\n  return await response.json();\n}\n\nmodule.exports = symbolicateStackTrace;\n"],"mappings":"AAUA;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,kBAA5B;;AAEA,OAAOC,gBAAP;AAGA,IAAIC,KAAJ;;AAmBA,SAASC,iBAAT,CAA2BC,UAA3B,EAAwD;EACtD,OAAO,CAAC,QAAQC,IAAR,CAAaD,UAAb,CAAD,IAA6B,QAAQC,IAAR,CAAaD,UAAb,CAApC;AACD;;AAED,SAAeE,qBAAf,CACEC,KADF;EAAA;;EAAA;IAAA;MAAA;QAAA;UAcE,IAAI,CAACL,KAAL,EAAY;YACVA,KAAK,GAAGM,MAAM,CAACN,KAAP,IAAgBF,OAAO,uBAAP,CAA+BE,KAAvD;UACD;;UAEKO,SAlBR,GAkBoBV,YAAY,EAlBhC;;UAAA,IAmBOU,SAAS,CAACC,sBAnBjB;YAAA;YAAA;UAAA;;UAAA,MAoBU,IAAIC,KAAJ,CAAU,yCAAV,CApBV;;QAAA;UAuBMC,SAvBN,GAuBkBL,KAvBlB;UAAA,wBAyBsBN,gBAAgB,CAACY,YAAjB,EAzBtB,EAyBSC,SAzBT,yBAyBSA,SAzBT;;UA0BE,IAAIA,SAAJ,EAAe;YACTC,mBADS,GACsB,KADtB;YAEbH,SAAS,GAAGL,KAAK,CAACS,GAAN,CAAU,UAACC,KAAD,EAAuB;cAC3C,IAAIA,KAAK,CAACC,IAAN,IAAc,IAAlB,EAAwB;gBACtB,OAAOD,KAAP;cACD;;cAMD,IAAI,CAACF,mBAAD,IAAwBZ,iBAAiB,CAACc,KAAK,CAACC,IAAP,CAA7C,EAA2D;gBAEzD,uCAAWD,KAAX;kBAAkBC,IAAI,EAAEJ;gBAAxB;cACD;;cAEDC,mBAAmB,GAAG,IAAtB;cACA,OAAOE,KAAP;YACD,CAhBW,CAAZ;UAiBD;;UA7CH;UAAA,iCA+CyBf,KAAK,CAACO,SAAS,CAACU,GAAV,GAAgB,aAAjB,EAAgC;YAC1DC,MAAM,EAAE,MADkD;YAE1DC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;cAAChB,KAAK,EAAEK;YAAR,CAAf;UAFoD,CAAhC,CA/C9B;;QAAA;UA+CQY,QA/CR;UAAA;UAAA,iCAmDeA,QAAQ,CAACC,IAAT,EAnDf;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAsDAC,MAAM,CAACC,OAAP,GAAiBrB,qBAAjB"},"metadata":{},"sourceType":"module"}