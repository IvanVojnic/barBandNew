{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar lastSetBadgeCount = 0;\nvar badgeModule = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getBadgeCountAsync: function getBadgeCountAsync() {\n    return _regeneratorRuntime.async(function getBadgeCountAsync$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", lastSetBadgeCount);\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  },\n  setBadgeCountAsync: function setBadgeCountAsync(badgeCount, options) {\n    var badgin;\n    return _regeneratorRuntime.async(function setBadgeCountAsync$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(typeof window === 'undefined')) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\", false);\n        case 2:\n          badgin = require('badgin');\n          if (badgeCount > 0) {\n            badgin.set(badgeCount, options);\n          } else {\n            badgin.clear();\n          }\n          lastSetBadgeCount = badgeCount;\n          return _context2.abrupt(\"return\", true);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default badgeModule;","map":{"version":3,"mappings":";AAEA,IAAIA,iBAAiB,GAAG,CAAC;AAEzB,IAAMC,WAAW,GAAgB;EAC/BC,WAAW,EAAE,uBAAK,CAAE,CAAC;EACrBC,eAAe,EAAE,2BAAK,CAAE,CAAC;EACzBC,kBAAkB,EAAE;IAAA;MAAA;QAAA;UAAA,iCACXJ,iBAAiB;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACzB;EACDK,kBAAkB,EAAE,4BAAOC,UAAU,EAAEC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA,MAGxC,OAAOC,MAAM,KAAK,WAAW;YAAA;YAAA;UAAA;UAAA,kCACxB,KAAK;QAAA;UAERC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;UAChC,IAAIJ,UAAU,GAAG,CAAC,EAAE;YAClBG,MAAM,CAACE,GAAG,CAACL,UAAU,EAAEC,OAAO,CAAC;WAChC,MAAM;YACLE,MAAM,CAACG,KAAK,EAAE;;UAEhBZ,iBAAiB,GAAGM,UAAU;UAAC,kCACxB,IAAI;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;CAEd;AAED,eAAeL,WAAW","names":["lastSetBadgeCount","badgeModule","addListener","removeListeners","getBadgeCountAsync","setBadgeCountAsync","badgeCount","options","window","badgin","require","set","clear"],"sourceRoot":"","sources":["../src/BadgeModule.web.ts"],"sourcesContent":["import { BadgeModule } from './BadgeModule.types';\n\nlet lastSetBadgeCount = 0;\n\nconst badgeModule: BadgeModule = {\n  addListener: () => {},\n  removeListeners: () => {},\n  getBadgeCountAsync: async () => {\n    return lastSetBadgeCount;\n  },\n  setBadgeCountAsync: async (badgeCount, options) => {\n    // If this module is loaded in SSR (NextJS), we can't modify the badge.\n    // It also can't load the badgin module, that instantly invokes methods on window.\n    if (typeof window === 'undefined') {\n      return false;\n    }\n    const badgin = require('badgin');\n    if (badgeCount > 0) {\n      badgin.set(badgeCount, options);\n    } else {\n      badgin.clear();\n    }\n    lastSetBadgeCount = badgeCount;\n    return true;\n  },\n};\n\nexport default badgeModule;\n"]},"metadata":{},"sourceType":"module"}