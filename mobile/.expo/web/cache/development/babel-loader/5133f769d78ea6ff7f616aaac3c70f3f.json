{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"stackPresentation\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { StackActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport { Screen as ScreenComponent, ScreenStack } from 'react-native-screens';\nimport HeaderConfig from \"./HeaderConfig\";\nvar Screen = ScreenComponent;\nvar isAndroid = Platform.OS === 'android';\nvar Container = View;\n\nif (__DEV__) {\n  var DebugContainer = function DebugContainer(props) {\n    var stackPresentation = props.stackPresentation,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      return React.createElement(AppContainer, null, React.createElement(View, rest));\n    }\n\n    return React.createElement(View, rest);\n  };\n\n  Container = DebugContainer;\n}\n\nexport default function NativeStackView(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var key = state.key,\n      routes = state.routes;\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  return React.createElement(ScreenStack, {\n    style: styles.container\n  }, routes.map(function (route) {\n    var _descriptors$route$ke = descriptors[route.key],\n        options = _descriptors$route$ke.options,\n        renderScene = _descriptors$route$ke.render;\n    var gestureEnabled = options.gestureEnabled,\n        _options$replaceAnima = options.replaceAnimation,\n        replaceAnimation = _options$replaceAnima === void 0 ? 'pop' : _options$replaceAnima,\n        _options$stackPresent = options.stackPresentation,\n        stackPresentation = _options$stackPresent === void 0 ? 'push' : _options$stackPresent,\n        stackAnimation = options.stackAnimation,\n        contentStyle = options.contentStyle;\n    var viewStyles = [styles.container, stackPresentation !== 'transparentModal' && {\n      backgroundColor: colors.background\n    }, contentStyle];\n    return React.createElement(Screen, {\n      key: route.key,\n      style: StyleSheet.absoluteFill,\n      gestureEnabled: isAndroid ? false : gestureEnabled,\n      replaceAnimation: replaceAnimation,\n      stackPresentation: stackPresentation,\n      stackAnimation: stackAnimation,\n      onWillAppear: function onWillAppear() {\n        navigation.emit({\n          type: 'transitionStart',\n          data: {\n            closing: false\n          },\n          target: route.key\n        });\n      },\n      onWillDisappear: function onWillDisappear() {\n        navigation.emit({\n          type: 'transitionStart',\n          data: {\n            closing: true\n          },\n          target: route.key\n        });\n      },\n      onAppear: function onAppear() {\n        navigation.emit({\n          type: 'appear',\n          target: route.key\n        });\n        navigation.emit({\n          type: 'transitionEnd',\n          data: {\n            closing: false\n          },\n          target: route.key\n        });\n      },\n      onDisappear: function onDisappear() {\n        navigation.emit({\n          type: 'transitionEnd',\n          data: {\n            closing: true\n          },\n          target: route.key\n        });\n      },\n      onDismissed: function onDismissed() {\n        navigation.emit({\n          type: 'dismiss',\n          target: route.key\n        });\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: key\n        }));\n      }\n    }, React.createElement(HeaderConfig, _extends({}, options, {\n      route: route\n    })), React.createElement(Container, {\n      style: viewStyles,\n      stackPresentation: stackPresentation\n    }, renderScene()));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["NativeStackView.tsx"],"names":["Screen","isAndroid","Platform","Container","DebugContainer","props","rest","stackPresentation","descriptors","routes","colors","useTheme","styles","container","route","render","renderScene","replaceAnimation","contentStyle","viewStyles","backgroundColor","background","StyleSheet","navigation","type","data","closing","target","key","StackActions","source","flex"],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View, ViewProps } from 'react-native';\n// @ts-ignore Getting private component\nimport AppContainer from 'react-native/Libraries/ReactNative/AppContainer';\nimport {\n  Screen as ScreenComponent,\n  ScreenProps,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n} from '../types';\nimport HeaderConfig from './HeaderConfig';\n\nconst Screen = (ScreenComponent as unknown) as React.ComponentType<ScreenProps>;\nconst isAndroid = Platform.OS === 'android';\n\nlet Container = View;\n\nif (__DEV__) {\n  const DebugContainer = (\n    props: ViewProps & { stackPresentation: StackPresentationTypes }\n  ) => {\n    const { stackPresentation, ...rest } = props;\n    if (Platform.OS === 'ios' && stackPresentation !== 'push') {\n      return (\n        <AppContainer>\n          <View {...rest} />\n        </AppContainer>\n      );\n    }\n    return <View {...rest} />;\n  };\n  // @ts-ignore Wrong props\n  Container = DebugContainer;\n}\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({\n  state,\n  navigation,\n  descriptors,\n}: Props): JSX.Element {\n  const { key, routes } = state;\n  const { colors } = useTheme();\n\n  return (\n    <ScreenStack style={styles.container}>\n      {routes.map((route) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          replaceAnimation = 'pop',\n          stackPresentation = 'push',\n          stackAnimation,\n          contentStyle,\n        } = options;\n\n        const viewStyles = [\n          styles.container,\n          stackPresentation !== 'transparentModal' && {\n            backgroundColor: colors.background,\n          },\n          contentStyle,\n        ];\n\n        return (\n          <Screen\n            key={route.key}\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={isAndroid ? false : gestureEnabled}\n            replaceAnimation={replaceAnimation}\n            stackPresentation={stackPresentation}\n            stackAnimation={stackAnimation}\n            onWillAppear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'appear',\n                target: route.key,\n              });\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.emit({\n                type: 'dismiss',\n                target: route.key,\n              });\n\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: key,\n              });\n            }}>\n            <HeaderConfig {...options} route={route} />\n            <Container\n              style={viewStyles}\n              // @ts-ignore Wrong props passed to View\n              stackPresentation={stackPresentation}>\n              {renderScene()}\n            </Container>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}