{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { computeNextBackoffInterval } from '@ide/backoff';\nimport * as Application from 'expo-application';\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport ServerRegistrationModule from \"../ServerRegistrationModule\";\nvar updateDevicePushTokenUrl = 'https://exp.host/--/api/v2/push/updateDeviceToken';\nexport function updateDevicePushTokenAsync(signal, token) {\n  var doUpdateDevicePushTokenAsync, shouldTry, retry, retriesCount, initialBackoff, backoffOptions, nextBackoffInterval;\n  return _regeneratorRuntime.async(function updateDevicePushTokenAsync$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        doUpdateDevicePushTokenAsync = function doUpdateDevicePushTokenAsync(retry) {\n          var _await$Promise$all, _await$Promise$all2, development, deviceId, body, response;\n          return _regeneratorRuntime.async(function doUpdateDevicePushTokenAsync$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(Promise.all([shouldUseDevelopmentNotificationService(), getDeviceIdAsync()]));\n              case 2:\n                _await$Promise$all = _context.sent;\n                _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n                development = _await$Promise$all2[0];\n                deviceId = _await$Promise$all2[1];\n                body = {\n                  deviceId: deviceId.toLowerCase(),\n                  development: development,\n                  deviceToken: token.data,\n                  appId: Application.applicationId,\n                  type: getTypeOfToken(token)\n                };\n                _context.prev = 7;\n                _context.next = 10;\n                return _regeneratorRuntime.awrap(fetch(updateDevicePushTokenUrl, {\n                  method: 'POST',\n                  headers: {\n                    'content-type': 'application/json'\n                  },\n                  body: JSON.stringify(body),\n                  signal: signal\n                }));\n              case 10:\n                response = _context.sent;\n                if (response.ok) {\n                  _context.next = 17;\n                  break;\n                }\n                _context.t0 = console;\n                _context.next = 15;\n                return _regeneratorRuntime.awrap(response.text());\n              case 15:\n                _context.t1 = _context.sent;\n                _context.t0.debug.call(_context.t0, '[expo-notifications] Error encountered while updating the device push token with the server:', _context.t1);\n              case 17:\n                if (!response.ok) {\n                  retry();\n                }\n                _context.next = 26;\n                break;\n              case 20:\n                _context.prev = 20;\n                _context.t2 = _context[\"catch\"](7);\n                if (!(_context.t2.name === 'AbortError')) {\n                  _context.next = 24;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 24:\n                console.warn('[expo-notifications] Error thrown while updating the device push token with the server:', _context.t2);\n                retry();\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }, null, null, [[7, 20]], Promise);\n        };\n        shouldTry = true;\n        retry = function retry() {\n          shouldTry = true;\n        };\n        retriesCount = 0;\n        initialBackoff = 500;\n        backoffOptions = {\n          maxBackoff: 2 * 60 * 1000\n        };\n        nextBackoffInterval = computeNextBackoffInterval(initialBackoff, retriesCount, backoffOptions);\n      case 7:\n        if (!(shouldTry && !signal.aborted)) {\n          _context2.next = 18;\n          break;\n        }\n        shouldTry = false;\n        _context2.next = 11;\n        return _regeneratorRuntime.awrap(doUpdateDevicePushTokenAsync(retry));\n      case 11:\n        if (!(shouldTry && !signal.aborted)) {\n          _context2.next = 16;\n          break;\n        }\n        nextBackoffInterval = computeNextBackoffInterval(initialBackoff, retriesCount, backoffOptions);\n        retriesCount += 1;\n        _context2.next = 16;\n        return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n          return setTimeout(resolve, nextBackoffInterval);\n        }));\n      case 16:\n        _context2.next = 7;\n        break;\n      case 18:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nfunction getDeviceIdAsync() {\n  return _regeneratorRuntime.async(function getDeviceIdAsync$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        _context3.prev = 0;\n        if (ServerRegistrationModule.getInstallationIdAsync) {\n          _context3.next = 3;\n          break;\n        }\n        throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n      case 3:\n        _context3.next = 5;\n        return _regeneratorRuntime.awrap(ServerRegistrationModule.getInstallationIdAsync());\n      case 5:\n        return _context3.abrupt(\"return\", _context3.sent);\n      case 8:\n        _context3.prev = 8;\n        _context3.t0 = _context3[\"catch\"](0);\n        throw new CodedError('ERR_NOTIFICATIONS_DEVICE_ID', \"Could not fetch the installation ID of the application: \" + _context3.t0 + \".\");\n      case 11:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}\nfunction shouldUseDevelopmentNotificationService() {\n  var notificationServiceEnvironment;\n  return _regeneratorRuntime.async(function shouldUseDevelopmentNotificationService$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        if (!(Platform.OS === 'ios')) {\n          _context4.next = 11;\n          break;\n        }\n        _context4.prev = 1;\n        _context4.next = 4;\n        return _regeneratorRuntime.awrap(Application.getIosPushNotificationServiceEnvironmentAsync());\n      case 4:\n        notificationServiceEnvironment = _context4.sent;\n        if (!(notificationServiceEnvironment === 'development')) {\n          _context4.next = 7;\n          break;\n        }\n        return _context4.abrupt(\"return\", true);\n      case 7:\n        _context4.next = 11;\n        break;\n      case 9:\n        _context4.prev = 9;\n        _context4.t0 = _context4[\"catch\"](1);\n      case 11:\n        return _context4.abrupt(\"return\", false);\n      case 12:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, [[1, 9]], Promise);\n}","map":{"version":3,"mappings":"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","names":["computeNextBackoffInterval","Application","CodedError","Platform","UnavailabilityError","ServerRegistrationModule","updateDevicePushTokenUrl","updateDevicePushTokenAsync","signal","token","doUpdateDevicePushTokenAsync","retry","Promise","all","shouldUseDevelopmentNotificationService","getDeviceIdAsync","development","deviceId","body","toLowerCase","deviceToken","data","appId","applicationId","type","getTypeOfToken","fetch","method","headers","JSON","stringify","response","ok","console","text","debug","name","warn","shouldTry","retriesCount","initialBackoff","backoffOptions","maxBackoff","nextBackoffInterval","aborted","resolve","setTimeout","getInstallationIdAsync","devicePushToken","OS","getIosPushNotificationServiceEnvironmentAsync","notificationServiceEnvironment"],"sourceRoot":"","sources":["../../src/utils/updateDevicePushTokenAsync.ts"],"sourcesContent":["import { computeNextBackoffInterval } from '@ide/backoff';\nimport * as Application from 'expo-application';\nimport { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ServerRegistrationModule from '../ServerRegistrationModule';\nimport { DevicePushToken } from '../Tokens.types';\n\nconst updateDevicePushTokenUrl = 'https://exp.host/--/api/v2/push/updateDeviceToken';\n\nexport async function updateDevicePushTokenAsync(signal: AbortSignal, token: DevicePushToken) {\n  const doUpdateDevicePushTokenAsync = async (retry: () => void) => {\n    const [development, deviceId] = await Promise.all([\n      shouldUseDevelopmentNotificationService(),\n      getDeviceIdAsync(),\n    ]);\n    const body = {\n      deviceId: deviceId.toLowerCase(),\n      development,\n      deviceToken: token.data,\n      appId: Application.applicationId,\n      type: getTypeOfToken(token),\n    };\n\n    try {\n      const response = await fetch(updateDevicePushTokenUrl, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(body),\n        signal,\n      });\n\n      // Help debug erroring servers\n      if (!response.ok) {\n        console.debug(\n          '[expo-notifications] Error encountered while updating the device push token with the server:',\n          await response.text()\n        );\n      }\n\n      // Retry if request failed\n      if (!response.ok) {\n        retry();\n      }\n    } catch (e) {\n      // Error returned if the request is aborted should be an 'AbortError'. In\n      // React Native fetch is polyfilled using `whatwg-fetch` which:\n      // - creates `AbortError`s like this\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L505\n      // - which creates exceptions like\n      //   https://github.com/github/fetch/blob/75d9455d380f365701151f3ac85c5bda4bbbde76/fetch.js#L490-L494\n      if (e.name === 'AbortError') {\n        // We don't consider AbortError a failure, it's a sign somewhere else the\n        // request is expected to succeed and we don't need this one, so let's\n        // just return.\n        return;\n      }\n\n      console.warn(\n        '[expo-notifications] Error thrown while updating the device push token with the server:',\n        e\n      );\n\n      retry();\n    }\n  };\n\n  let shouldTry = true;\n  const retry = () => {\n    shouldTry = true;\n  };\n\n  let retriesCount = 0;\n  const initialBackoff = 500; // 0.5 s\n  const backoffOptions = {\n    maxBackoff: 2 * 60 * 1000, // 2 minutes\n  };\n  let nextBackoffInterval = computeNextBackoffInterval(\n    initialBackoff,\n    retriesCount,\n    backoffOptions\n  );\n\n  while (shouldTry && !signal.aborted) {\n    // Will be set to true by `retry` if it's called\n    shouldTry = false;\n    await doUpdateDevicePushTokenAsync(retry);\n\n    // Do not wait if we won't retry\n    if (shouldTry && !signal.aborted) {\n      nextBackoffInterval = computeNextBackoffInterval(\n        initialBackoff,\n        retriesCount,\n        backoffOptions\n      );\n      retriesCount += 1;\n      await new Promise((resolve) => setTimeout(resolve, nextBackoffInterval));\n    }\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_DEVICE_ID',\n      `Could not fetch the installation ID of the application: ${e}.`\n    );\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n\n// Same as in getExpoPushTokenAsync\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}