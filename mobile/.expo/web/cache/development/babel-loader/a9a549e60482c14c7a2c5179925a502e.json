{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport PORT from \"../../env.js\";\nvar urlAPI = \"http://192.168.0.103:\" + PORT;\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nvar getId = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var value = yield AsyncStorage.getItem('userId');\n\n      if (value !== null) {\n        return value;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\n  return function getId() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var sendInvite = function () {\n  var _ref2 = _asyncToGenerator(function* (userFriendsList) {\n    var userId = yield getId();\n    var isAuth = true;\n    var res = yield fetch(urlAPI + \"/sendInvite\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userSender: userId,\n        friendsList: userFriendsList\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function sendInvite(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var acceptInvite = function () {\n  var _ref3 = _asyncToGenerator(function* (roomId) {\n    var userId = yield getId();\n    var isAuth = true;\n    var res = yield fetch(urlAPI + \"/acceptInvite\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userId: userId,\n        roomId: roomId\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function acceptInvite(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getRooms = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    var userId = yield getId();\n    var isAuth = true;\n    var res = yield fetch(urlAPI + \"/getRooms\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userId: userId\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function getRooms() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var acceptRequestFriends = function () {\n  var _ref5 = _asyncToGenerator(function* (id) {\n    var userId = yield getId();\n    var isAuth = true;\n    console.log(id);\n    var res = yield fetch(urlAPI + \"/acceptFriendsRequest\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userSender: id,\n        userReceiver: userId\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function acceptRequestFriends(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getNotifications = function () {\n  var _ref6 = _asyncToGenerator(function* () {\n    var userId = yield getId();\n    var response = yield fetch(urlAPI + \"/getFriendsRequest\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        id: userId\n      })\n    });\n\n    if (response.ok) {\n      return yield response.json();\n    } else {\n      console.log(response);\n      return 0;\n    }\n\n    return 0;\n  });\n\n  return function getNotifications() {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getFriends = function () {\n  var _ref7 = _asyncToGenerator(function* () {\n    var userId = yield getId();\n    var response = yield fetch(urlAPI + \"/getFriends\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        id: userId\n      })\n    });\n\n    if (response.ok) {\n      return yield response.json();\n    } else {\n      console.log(response);\n      return 0;\n    }\n  });\n\n  return function getFriends() {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var sendRequest = function () {\n  var _ref8 = _asyncToGenerator(function* (userReceiverID) {\n    var userSenderID = yield getId();\n    var isAuth = true;\n    var res = yield fetch(urlAPI + \"/sendRequest\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userSender: userSenderID,\n        userReceiver: userReceiverID\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function sendRequest(_x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var findFriends = function () {\n  var _ref9 = _asyncToGenerator(function* (emailUser) {\n    var isAuth = true;\n    var res = yield fetch(urlAPI + \"/findFriend\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        email: emailUser\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function findFriends(_x5) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var onLoggedIn = function () {\n  var _ref10 = _asyncToGenerator(function* (token) {\n    var response = yield fetch(urlAPI + \"/private\", {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        'Authorization': \"Bearer \" + token\n      }\n    });\n\n    if (response.ok) {\n      try {\n        var jsonRes = yield response.json();\n        console.log(jsonRes);\n        return jsonRes.checkAuth;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  });\n\n  return function onLoggedIn(_x6) {\n    return _ref10.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["PORT","urlAPI","AsyncStorage","getId","value","getItem","e","console","log","sendInvite","userFriendsList","userId","isAuth","res","fetch","method","headers","body","JSON","stringify","userSender","friendsList","ok","json","acceptInvite","roomId","getRooms","acceptRequestFriends","id","userReceiver","getNotifications","response","getFriends","sendRequest","userReceiverID","userSenderID","findFriends","emailUser","email","onLoggedIn","token","jsonRes","checkAuth","err"],"sources":["/Users/apple/Documents/Programming/barBandNew/mobile/core/api/API.js"],"sourcesContent":["import PORT from '../../env.js'\r\nconst urlAPI = `http://192.168.0.103:${PORT}`\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n/*const getAccessToken = async () => {\r\n   try {\r\n      const value = await AsyncStorage.getItem('accessToken');\r\n      if(value !== null) {\r\n         return value;\r\n      }\r\n   } catch(e) {\r\n      console.log(e);\r\n   }\r\n}*/\r\n\r\nconst getId = async () => {\r\n   try {\r\n      const value = await AsyncStorage.getItem('userId');\r\n      if(value !== null) {\r\n         return value;\r\n      }\r\n   } catch(e) {\r\n      console.log(e);\r\n   }\r\n}\r\n\r\nexport const sendInvite = async (userFriendsList) => {\r\n   const userId = await getId();\r\n   //const token = await getAccessToken();\r\n   const isAuth = true//await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/sendInvite`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userSender: userId, friendsList: userFriendsList})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const acceptInvite = async (roomId) => {\r\n   const userId = await getId();\r\n   //const token = await getAccessToken();\r\n   const isAuth = true//await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/acceptInvite`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userId: userId, roomId: roomId})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const getRooms = async () => {\r\n   const userId = await getId();\r\n   //const token = await getAccessToken();\r\n   const isAuth = true//await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/getRooms`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userId: userId})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const acceptRequestFriends = async (id) => {\r\n   const userId = await getId();\r\n   //const token = await getAccessToken();\r\n   const isAuth = true//await onLoggedIn(token);\r\n   console.log(id);\r\n   let res = await fetch(`${urlAPI}/acceptFriendsRequest`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userSender: id, userReceiver: userId})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const getNotifications = async () => {\r\n   const userId = await getId();\r\n   let response = await fetch(`${urlAPI}/getFriendsRequest`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({id: userId})\r\n   });\r\n   if (response.ok) {\r\n      return await response.json();\r\n   } else {\r\n      console.log(response);\r\n      return 0;\r\n   }\r\n   return 0;\r\n}\r\n\r\nexport const getFriends = async () => {\r\n   const userId = await getId();\r\n   let response = await fetch(`${urlAPI}/getFriends`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({id: userId})\r\n   });\r\n   if (response.ok) {\r\n      return await response.json();\r\n   } else {\r\n      console.log(response);\r\n      return 0;\r\n   }\r\n}\r\n\r\nexport const sendRequest = async (userReceiverID) => {\r\n   const userSenderID = await getId();\r\n   //const token = await getAccessToken();\r\n   const isAuth = true//await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/sendRequest`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userSender: userSenderID, userReceiver: userReceiverID})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const findFriends = async (emailUser) => {\r\n   //const token = await getAccessToken();\r\n   const isAuth = true//await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/findFriend`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({email: emailUser})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth){\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const onLoggedIn = async (token) => {\r\n   let response = await fetch(`${urlAPI}/private`, {\r\n      method: 'GET',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n         'Authorization': `Bearer ${token}`,\r\n      },\r\n   })\r\n   if (response.ok) {\r\n      try {\r\n         const jsonRes = await response.json();\r\n         console.log(jsonRes);\r\n         return jsonRes.checkAuth;\r\n      } catch (err) {\r\n         console.log(err);\r\n      }\r\n   }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}