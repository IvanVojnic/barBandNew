{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport PORT from \"../../env.js\";\nvar urlAPI = \"https://172.20.10.2\" + PORT;\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Device from 'expo-device';\nimport * as Notifications from 'expo-notifications';\n\nvar getAccessToken = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var value = yield AsyncStorage.getItem('accessToken');\n\n      if (value !== null) {\n        return value;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\n  return function getAccessToken() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getId = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var value = yield AsyncStorage.getItem('userId');\n\n      if (value !== null) {\n        return value;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  });\n\n  return function getId() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport var sendInvite = function () {\n  var _ref3 = _asyncToGenerator(function* (userFriendsList) {\n    var userId = yield getId();\n    var token = yield getAccessToken();\n    var isAuth = yield onLoggedIn(token);\n    var res = yield fetch(urlAPI + \"/sendInvite\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userSender: userId,\n        friendsList: userFriendsList\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function sendInvite(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var acceptInvite = function () {\n  var _ref4 = _asyncToGenerator(function* (roomId) {\n    var userId = yield getId();\n    var token = yield getAccessToken();\n    var isAuth = yield onLoggedIn(token);\n    var res = yield fetch(urlAPI + \"/acceptInvite\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userId: userId,\n        roomId: roomId\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function acceptInvite(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getRooms = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    var userId = yield getId();\n    var token = yield getAccessToken();\n    var isAuth = yield onLoggedIn(token);\n    var res = yield fetch(urlAPI + \"/getRooms\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userId: userId\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function getRooms() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var acceptRequestFriends = function () {\n  var _ref6 = _asyncToGenerator(function* (id) {\n    var userId = yield getId();\n    var token = yield getAccessToken();\n    var isAuth = yield onLoggedIn(token);\n    console.log(id);\n    var res = yield fetch(urlAPI + \"/acceptFriendsRequest\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userSender: id,\n        userReceiver: userId\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function acceptRequestFriends(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var getNotifications = function () {\n  var _ref7 = _asyncToGenerator(function* () {\n    var userId = yield getId();\n    var response = yield fetch(urlAPI + \"/getFriendsRequest\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        id: userId\n      })\n    });\n\n    if (response.ok) {\n      return yield response.json();\n    } else {\n      console.log(response);\n      return 0;\n    }\n\n    return 0;\n  });\n\n  return function getNotifications() {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getFriends = function () {\n  var _ref8 = _asyncToGenerator(function* () {\n    var userId = yield getId();\n    var response = yield fetch(urlAPI + \"/getFriends\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        id: userId\n      })\n    });\n\n    if (response.ok) {\n      return yield response.json();\n    } else {\n      console.log(response);\n      return 0;\n    }\n  });\n\n  return function getFriends() {\n    return _ref8.apply(this, arguments);\n  };\n}();\nexport var sendRequest = function () {\n  var _ref9 = _asyncToGenerator(function* (userReceiverID) {\n    var userSenderID = yield getId();\n    var token = yield getAccessToken();\n    var isAuth = yield onLoggedIn(token);\n    var res = yield fetch(urlAPI + \"/sendRequest\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        userSender: userSenderID,\n        userReceiver: userReceiverID\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function sendRequest(_x4) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nexport var findFriends = function () {\n  var _ref10 = _asyncToGenerator(function* (emailUser) {\n    var token = yield getAccessToken();\n    var isAuth = yield onLoggedIn(token);\n    var res = yield fetch(urlAPI + \"/findFriend\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify({\n        email: emailUser\n      })\n    });\n\n    if (res.ok) {\n      if (isAuth) {\n        return yield res.json();\n      }\n    }\n  });\n\n  return function findFriends(_x5) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nexport var onLoggedIn = function () {\n  var _ref11 = _asyncToGenerator(function* (token) {\n    var response = yield fetch(urlAPI + \"/private\", {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n        'Authorization': \"Bearer \" + token\n      }\n    });\n\n    if (response.ok) {\n      try {\n        Notifications.setNotificationHandler({\n          handleNotification: function () {\n            var _handleNotification = _asyncToGenerator(function* () {\n              return {\n                shouldShowAlert: true,\n                shouldPlaySound: false,\n                shouldSetBadge: false\n              };\n            });\n\n            function handleNotification() {\n              return _handleNotification.apply(this, arguments);\n            }\n\n            return handleNotification;\n          }()\n        });\n\n        function App() {\n          var _useState = useState(''),\n              _useState2 = _slicedToArray(_useState, 2),\n              expoPushToken = _useState2[0],\n              setExpoPushToken = _useState2[1];\n\n          var _useState3 = useState(false),\n              _useState4 = _slicedToArray(_useState3, 2),\n              notification = _useState4[0],\n              setNotification = _useState4[1];\n\n          var notificationListener = useRef();\n          var responseListener = useRef();\n          useEffect(function () {\n            registerForPushNotificationsAsync().then(function (token) {\n              return setExpoPushToken(token);\n            });\n            notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n              setNotification(notification);\n            });\n            responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n              console.log(response);\n            });\n            return function () {\n              Notifications.removeNotificationSubscription(notificationListener.current);\n              Notifications.removeNotificationSubscription(responseListener.current);\n            };\n          }, []);\n        }\n\n        function schedulePushNotification() {\n          return _schedulePushNotification.apply(this, arguments);\n        }\n\n        function _schedulePushNotification() {\n          _schedulePushNotification = _asyncToGenerator(function* () {\n            yield Notifications.scheduleNotificationAsync({\n              content: {\n                title: \"You've got mail! ðŸ“¬\",\n                body: 'Here is the notification body',\n                data: {\n                  data: 'goes here'\n                }\n              },\n              trigger: {\n                seconds: 2\n              }\n            });\n          });\n          return _schedulePushNotification.apply(this, arguments);\n        }\n\n        function registerForPushNotificationsAsync() {\n          return _registerForPushNotificationsAsync.apply(this, arguments);\n        }\n\n        function _registerForPushNotificationsAsync() {\n          _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n            var pushToken;\n\n            if (Platform.OS === 'android') {\n              yield Notifications.setNotificationChannelAsync('default', {\n                name: 'default',\n                importance: Notifications.AndroidImportance.MAX,\n                vibrationPattern: [0, 250, 250, 250],\n                lightColor: '#FF231F7C'\n              });\n            }\n\n            if (Device.isDevice) {\n              var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n                  existingStatus = _yield$Notifications$.status;\n\n              var finalStatus = existingStatus;\n\n              if (existingStatus !== 'granted') {\n                var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n                    status = _yield$Notifications$2.status;\n\n                finalStatus = status;\n              }\n\n              if (finalStatus !== 'granted') {\n                alert('Failed to get push token for push notification!');\n                return;\n              }\n\n              pushToken = (yield Notifications.getExpoPushTokenAsync()).data;\n              console.log(pushToken);\n            } else {\n              alert('Must use physical device for Push Notifications');\n            }\n\n            JSON.stringify(pushToken);\n            return pushToken;\n          });\n          return _registerForPushNotificationsAsync.apply(this, arguments);\n        }\n\n        var sendToken = function () {\n          var _ref12 = _asyncToGenerator(function* () {\n            var token = yield getAccessToken();\n            var isAuth = yield onLoggedIn(token);\n            var res = yield fetch(urlAPI + \"/private\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n              },\n              body: JSON.stringify(pushToken)\n            });\n\n            if (res.ok) {\n              if (isAuth) {\n                return yield res.json();\n              }\n            }\n          });\n\n          return function sendToken() {\n            return _ref12.apply(this, arguments);\n          };\n        }();\n\n        var jsonRes = yield response.json();\n        console.log(jsonRes);\n        return jsonRes.checkAuth;\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  });\n\n  return function onLoggedIn(_x6) {\n    return _ref11.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["PORT","urlAPI","AsyncStorage","Device","Notifications","getAccessToken","value","getItem","e","console","log","getId","sendInvite","userFriendsList","userId","token","isAuth","onLoggedIn","res","fetch","method","headers","body","JSON","stringify","userSender","friendsList","ok","json","acceptInvite","roomId","getRooms","acceptRequestFriends","id","userReceiver","getNotifications","response","getFriends","sendRequest","userReceiverID","userSenderID","findFriends","emailUser","email","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","App","useState","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","useRef","responseListener","useEffect","registerForPushNotificationsAsync","then","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","schedulePushNotification","scheduleNotificationAsync","content","title","data","trigger","seconds","pushToken","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","sendToken","jsonRes","checkAuth","err"],"sources":["/Users/apple/Documents/Programming/barBandNew/mobile/core/api/API.js"],"sourcesContent":["import PORT from '../../env.js'\r\nconst urlAPI = `https://172.20.10.2${PORT}`\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport * as Device from 'expo-device';\r\nimport * as Notifications from 'expo-notifications';\r\nconst getAccessToken = async () => {\r\n   try {\r\n      const value = await AsyncStorage.getItem('accessToken');\r\n      if(value !== null) {\r\n         return value;\r\n      }\r\n   } catch(e) {\r\n      console.log(e);\r\n   }\r\n}\r\n\r\nconst getId = async () => {\r\n   try {\r\n      const value = await AsyncStorage.getItem('userId');\r\n      if(value !== null) {\r\n         return value;\r\n      }\r\n   } catch(e) {\r\n      console.log(e);\r\n   }\r\n}\r\n\r\nexport const sendInvite = async (userFriendsList) => {\r\n   const userId = await getId();\r\n   const token = await getAccessToken();\r\n   const isAuth = await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/sendInvite`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userSender: userId, friendsList: userFriendsList})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const acceptInvite = async (roomId) => {\r\n   const userId = await getId();\r\n   const token = await getAccessToken();\r\n   const isAuth = await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/acceptInvite`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userId: userId, roomId: roomId})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const getRooms = async () => {\r\n   const userId = await getId();\r\n   const token = await getAccessToken();\r\n   const isAuth = await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/getRooms`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userId: userId})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const acceptRequestFriends = async (id) => {\r\n   const userId = await getId();\r\n   const token = await getAccessToken();\r\n   const isAuth = await onLoggedIn(token);\r\n   console.log(id);\r\n   let res = await fetch(`${urlAPI}/acceptFriendsRequest`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userSender: id, userReceiver: userId})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const getNotifications = async () => {\r\n   const userId = await getId();\r\n   let response = await fetch(`${urlAPI}/getFriendsRequest`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({id: userId})\r\n   });\r\n   if (response.ok) {\r\n      return await response.json();\r\n   } else {\r\n      console.log(response);\r\n      return 0;\r\n   }\r\n   return 0;\r\n}\r\n\r\nexport const getFriends = async () => {\r\n   const userId = await getId();\r\n   let response = await fetch(`${urlAPI}/getFriends`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({id: userId})\r\n   });\r\n   if (response.ok) {\r\n      return await response.json();\r\n   } else {\r\n      console.log(response);\r\n      return 0;\r\n   }\r\n}\r\n\r\nexport const sendRequest = async (userReceiverID) => {\r\n   const userSenderID = await getId();\r\n   const token = await getAccessToken();\r\n   const isAuth = await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/sendRequest`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({userSender: userSenderID, userReceiver: userReceiverID})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth) {\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const findFriends = async (emailUser) => {\r\n   const token = await getAccessToken();\r\n   const isAuth = await onLoggedIn(token);\r\n   let res = await fetch(`${urlAPI}/findFriend`, {\r\n      method: 'POST',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify({email: emailUser})\r\n   })\r\n   if (res.ok) {\r\n      if(isAuth){\r\n         return await res.json();\r\n      }\r\n   }\r\n}\r\n\r\nexport const onLoggedIn = async (token) => {\r\n   let response = await fetch(`${urlAPI}/private`, {\r\n      method: 'GET',\r\n      headers: {\r\n         'Content-Type': 'application/json;charset=utf-8',\r\n         'Authorization': `Bearer ${token}`,\r\n      },\r\n   })\r\n   if (response.ok) {\r\n      try {\r\n\r\n\r\n        Notifications.setNotificationHandler({\r\n            handleNotification: async () => ({\r\n               shouldShowAlert: true,\r\n               shouldPlaySound: false,\r\n               shouldSetBadge: false,\r\n            }),\r\n         });\r\n\r\n           function App() {\r\n            const [expoPushToken, setExpoPushToken] = useState('');\r\n            const [notification, setNotification] = useState(false);\r\n            const notificationListener = useRef();\r\n            const responseListener = useRef();\r\n\r\n            useEffect(() => {\r\n               registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n               notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n                  setNotification(notification);\r\n               });\r\n\r\n               responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n                  console.log(response);\r\n               });\r\n\r\n               return () => {\r\n                  Notifications.removeNotificationSubscription(notificationListener.current);\r\n                  Notifications.removeNotificationSubscription(responseListener.current);\r\n               };\r\n            }, []);\r\n\r\n\r\n         }\r\n\r\n         async function schedulePushNotification() {\r\n            await Notifications.scheduleNotificationAsync({\r\n               content: {\r\n                  title: \"You've got mail! ðŸ“¬\",\r\n                  body: 'Here is the notification body',\r\n                  data: { data: 'goes here' },\r\n               },\r\n               trigger: { seconds: 2 },\r\n            });\r\n         }\r\n\r\n         async function registerForPushNotificationsAsync() {\r\n            let pushToken;\r\n\r\n            if (Platform.OS === 'android') {\r\n               await Notifications.setNotificationChannelAsync('default', {\r\n                  name: 'default',\r\n                  importance: Notifications.AndroidImportance.MAX,\r\n                  vibrationPattern: [0, 250, 250, 250],\r\n                  lightColor: '#FF231F7C',\r\n               });\r\n            }\r\n\r\n            if (Device.isDevice) {\r\n               const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n               let finalStatus = existingStatus;\r\n               if (existingStatus !== 'granted') {\r\n                  const { status } = await Notifications.requestPermissionsAsync();\r\n                  finalStatus = status;\r\n               }\r\n               if (finalStatus !== 'granted') {\r\n                  alert('Failed to get push token for push notification!');\r\n                  return;\r\n               }\r\n               pushToken = (await Notifications.getExpoPushTokenAsync()).data;\r\n               console.log(pushToken);\r\n            } else {\r\n               alert('Must use physical device for Push Notifications');\r\n            }\r\n\r\n             JSON.stringify(pushToken)\r\n            return pushToken;\r\n         }\r\n           const sendToken = async () => {\r\n            const token = await getAccessToken();\r\n            const isAuth = await onLoggedIn(token);\r\n            let res = await fetch(`${urlAPI}/private`, {\r\n               method: 'POST',\r\n               headers: {\r\n                  'Content-Type': 'application/json;charset=utf-8',\r\n               },\r\n               body: JSON.stringify(pushToken)\r\n            })\r\n            if (res.ok) {\r\n               if(isAuth){\r\n                  return await res.json();\r\n               }\r\n            }\r\n         }\r\n\r\n         const jsonRes = await response.json();\r\n         console.log(jsonRes);\r\n\r\n         return jsonRes.checkAuth;\r\n      } catch (err) {\r\n         console.log(err);\r\n      }\r\n   }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}