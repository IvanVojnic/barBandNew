{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar BlobManager = require(\"../Blob/BlobManager\");\n\nvar EventTarget = require('event-target-shim');\n\nvar GlobalPerformanceLogger = require('react-native/Libraries/Utilities/GlobalPerformanceLogger');\n\nvar RCTNetworking = require(\"./RCTNetworking\");\n\nvar base64 = require('base64-js');\n\nvar invariant = require('invariant');\n\nvar warning = require('fbjs/lib/warning');\n\nvar DEBUG_NETWORK_SEND_DELAY = false;\n\nif (BlobManager.isAvailable) {\n  BlobManager.addNetworkingHandler();\n}\n\nvar UNSENT = 0;\nvar OPENED = 1;\nvar HEADERS_RECEIVED = 2;\nvar LOADING = 3;\nvar DONE = 4;\nvar SUPPORTED_RESPONSE_TYPES = {\n  arraybuffer: typeof global.ArrayBuffer === 'function',\n  blob: typeof global.Blob === 'function',\n  document: false,\n  json: true,\n  text: true,\n  '': true\n};\nvar REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];\nvar XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');\n\nvar XMLHttpRequestEventTarget = function (_ref) {\n  _inherits(XMLHttpRequestEventTarget, _ref);\n\n  var _super = _createSuper(XMLHttpRequestEventTarget);\n\n  function XMLHttpRequestEventTarget() {\n    _classCallCheck(this, XMLHttpRequestEventTarget);\n\n    return _super.apply(this, arguments);\n  }\n\n  return XMLHttpRequestEventTarget;\n}(EventTarget.apply(void 0, REQUEST_EVENTS));\n\nvar XMLHttpRequest = function (_ref2) {\n  _inherits(XMLHttpRequest, _ref2);\n\n  var _super2 = _createSuper(XMLHttpRequest);\n\n  function XMLHttpRequest() {\n    var _this;\n\n    _classCallCheck(this, XMLHttpRequest);\n\n    _this = _super2.call(this);\n    _this.UNSENT = UNSENT;\n    _this.OPENED = OPENED;\n    _this.HEADERS_RECEIVED = HEADERS_RECEIVED;\n    _this.LOADING = LOADING;\n    _this.DONE = DONE;\n    _this.readyState = UNSENT;\n    _this.status = 0;\n    _this.timeout = 0;\n    _this.withCredentials = true;\n    _this.upload = new XMLHttpRequestEventTarget();\n    _this._aborted = false;\n    _this._hasError = false;\n    _this._method = null;\n    _this._perfKey = null;\n    _this._response = '';\n    _this._url = null;\n    _this._timedOut = false;\n    _this._trackingName = 'unknown';\n    _this._incrementalEvents = false;\n\n    _this._reset();\n\n    return _this;\n  }\n\n  _createClass(XMLHttpRequest, [{\n    key: \"_reset\",\n    value: function _reset() {\n      this.readyState = this.UNSENT;\n      this.responseHeaders = undefined;\n      this.status = 0;\n      delete this.responseURL;\n      this._requestId = null;\n      this._cachedResponse = undefined;\n      this._hasError = false;\n      this._headers = {};\n      this._response = '';\n      this._responseType = '';\n      this._sent = false;\n      this._lowerCaseResponseHeaders = {};\n\n      this._clearSubscriptions();\n\n      this._timedOut = false;\n    }\n  }, {\n    key: \"responseType\",\n    get: function get() {\n      return this._responseType;\n    },\n    set: function set(responseType) {\n      if (this._sent) {\n        throw new Error(\"Failed to set the 'responseType' property on 'XMLHttpRequest': The \" + 'response type cannot be set after the request has been sent.');\n      }\n\n      if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {\n        warning(false, \"The provided value '\" + responseType + \"' is not a valid 'responseType'.\");\n        return;\n      }\n\n      invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', \"The provided value '\" + responseType + \"' is unsupported in this environment.\");\n\n      if (responseType === 'blob') {\n        invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');\n      }\n\n      this._responseType = responseType;\n    }\n  }, {\n    key: \"responseText\",\n    get: function get() {\n      if (this._responseType !== '' && this._responseType !== 'text') {\n        throw new Error(\"The 'responseText' property is only available if 'responseType' \" + (\"is set to '' or 'text', but it is '\" + this._responseType + \"'.\"));\n      }\n\n      if (this.readyState < LOADING) {\n        return '';\n      }\n\n      return this._response;\n    }\n  }, {\n    key: \"response\",\n    get: function get() {\n      var responseType = this.responseType;\n\n      if (responseType === '' || responseType === 'text') {\n        return this.readyState < LOADING || this._hasError ? '' : this._response;\n      }\n\n      if (this.readyState !== DONE) {\n        return null;\n      }\n\n      if (this._cachedResponse !== undefined) {\n        return this._cachedResponse;\n      }\n\n      switch (responseType) {\n        case 'document':\n          this._cachedResponse = null;\n          break;\n\n        case 'arraybuffer':\n          this._cachedResponse = base64.toByteArray(this._response).buffer;\n          break;\n\n        case 'blob':\n          if (typeof this._response === 'object' && this._response) {\n            this._cachedResponse = BlobManager.createFromOptions(this._response);\n          } else if (this._response === '') {\n            this._cachedResponse = BlobManager.createFromParts([]);\n          } else {\n            throw new Error(\"Invalid response for blob: \" + this._response);\n          }\n\n          break;\n\n        case 'json':\n          try {\n            this._cachedResponse = JSON.parse(this._response);\n          } catch (_) {\n            this._cachedResponse = null;\n          }\n\n          break;\n\n        default:\n          this._cachedResponse = null;\n      }\n\n      return this._cachedResponse;\n    }\n  }, {\n    key: \"__didCreateRequest\",\n    value: function __didCreateRequest(requestId) {\n      this._requestId = requestId;\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);\n    }\n  }, {\n    key: \"__didUploadProgress\",\n    value: function __didUploadProgress(requestId, progress, total) {\n      if (requestId === this._requestId) {\n        this.upload.dispatchEvent({\n          type: 'progress',\n          lengthComputable: true,\n          loaded: progress,\n          total: total\n        });\n      }\n    }\n  }, {\n    key: \"__didReceiveResponse\",\n    value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {\n      if (requestId === this._requestId) {\n        this._perfKey != null && GlobalPerformanceLogger.stopTimespan(this._perfKey);\n        this.status = status;\n        this.setResponseHeaders(responseHeaders);\n        this.setReadyState(this.HEADERS_RECEIVED);\n\n        if (responseURL || responseURL === '') {\n          this.responseURL = responseURL;\n        } else {\n          delete this.responseURL;\n        }\n\n        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});\n      }\n    }\n  }, {\n    key: \"__didReceiveData\",\n    value: function __didReceiveData(requestId, response) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n\n      this._response = response;\n      this._cachedResponse = undefined;\n      this.setReadyState(this.LOADING);\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);\n    }\n  }, {\n    key: \"__didReceiveIncrementalData\",\n    value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n\n      if (!this._response) {\n        this._response = responseText;\n      } else {\n        this._response += responseText;\n      }\n\n      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);\n      this.setReadyState(this.LOADING);\n\n      this.__didReceiveDataProgress(requestId, progress, total);\n    }\n  }, {\n    key: \"__didReceiveDataProgress\",\n    value: function __didReceiveDataProgress(requestId, loaded, total) {\n      if (requestId !== this._requestId) {\n        return;\n      }\n\n      this.dispatchEvent({\n        type: 'progress',\n        lengthComputable: total >= 0,\n        loaded: loaded,\n        total: total\n      });\n    }\n  }, {\n    key: \"__didCompleteResponse\",\n    value: function __didCompleteResponse(requestId, error, timeOutError) {\n      if (requestId === this._requestId) {\n        if (error) {\n          if (this._responseType === '' || this._responseType === 'text') {\n            this._response = error;\n          }\n\n          this._hasError = true;\n\n          if (timeOutError) {\n            this._timedOut = true;\n          }\n        }\n\n        this._clearSubscriptions();\n\n        this._requestId = null;\n        this.setReadyState(this.DONE);\n\n        if (error) {\n          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);\n        } else {\n          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);\n        }\n      }\n    }\n  }, {\n    key: \"_clearSubscriptions\",\n    value: function _clearSubscriptions() {\n      (this._subscriptions || []).forEach(function (sub) {\n        if (sub) {\n          sub.remove();\n        }\n      });\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"getAllResponseHeaders\",\n    value: function getAllResponseHeaders() {\n      if (!this.responseHeaders) {\n        return null;\n      }\n\n      var headers = this.responseHeaders || {};\n      return Object.keys(headers).map(function (headerName) {\n        return headerName + ': ' + headers[headerName];\n      }).join('\\r\\n');\n    }\n  }, {\n    key: \"getResponseHeader\",\n    value: function getResponseHeader(header) {\n      var value = this._lowerCaseResponseHeaders[header.toLowerCase()];\n\n      return value !== undefined ? value : null;\n    }\n  }, {\n    key: \"setRequestHeader\",\n    value: function setRequestHeader(header, value) {\n      if (this.readyState !== this.OPENED) {\n        throw new Error('Request has not been opened');\n      }\n\n      this._headers[header.toLowerCase()] = String(value);\n    }\n  }, {\n    key: \"setTrackingName\",\n    value: function setTrackingName(trackingName) {\n      this._trackingName = trackingName;\n      return this;\n    }\n  }, {\n    key: \"open\",\n    value: function open(method, url, async) {\n      if (this.readyState !== this.UNSENT) {\n        throw new Error('Cannot open, already sending');\n      }\n\n      if (async !== undefined && !async) {\n        throw new Error('Synchronous http requests are not supported');\n      }\n\n      if (!url) {\n        throw new Error('Cannot load an empty url');\n      }\n\n      this._method = method.toUpperCase();\n      this._url = url;\n      this._aborted = false;\n      this.setReadyState(this.OPENED);\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      var _this2 = this;\n\n      if (this.readyState !== this.OPENED) {\n        throw new Error('Request has not been opened');\n      }\n\n      if (this._sent) {\n        throw new Error('Request has already been sent');\n      }\n\n      this._sent = true;\n      var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;\n\n      this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {\n        return _this2.__didUploadProgress.apply(_this2, _toConsumableArray(args));\n      }));\n\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {\n        return _this2.__didReceiveResponse.apply(_this2, _toConsumableArray(args));\n      }));\n\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {\n        return _this2.__didReceiveData.apply(_this2, _toConsumableArray(args));\n      }));\n\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {\n        return _this2.__didReceiveIncrementalData.apply(_this2, _toConsumableArray(args));\n      }));\n\n      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {\n        return _this2.__didReceiveDataProgress.apply(_this2, _toConsumableArray(args));\n      }));\n\n      this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {\n        return _this2.__didCompleteResponse.apply(_this2, _toConsumableArray(args));\n      }));\n\n      var nativeResponseType = 'text';\n\n      if (this._responseType === 'arraybuffer') {\n        nativeResponseType = 'base64';\n      }\n\n      if (this._responseType === 'blob') {\n        nativeResponseType = 'blob';\n      }\n\n      var doSend = function doSend() {\n        var friendlyName = _this2._trackingName !== 'unknown' ? _this2._trackingName : _this2._url;\n        _this2._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);\n        GlobalPerformanceLogger.startTimespan(_this2._perfKey);\n        invariant(_this2._method, 'XMLHttpRequest method needs to be defined (%s).', friendlyName);\n        invariant(_this2._url, 'XMLHttpRequest URL needs to be defined (%s).', friendlyName);\n        RCTNetworking.sendRequest(_this2._method, _this2._trackingName, _this2._url, _this2._headers, data, nativeResponseType, incrementalEvents, _this2.timeout, _this2.__didCreateRequest.bind(_this2), _this2.withCredentials);\n      };\n\n      if (DEBUG_NETWORK_SEND_DELAY) {\n        setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);\n      } else {\n        doSend();\n      }\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this._aborted = true;\n\n      if (this._requestId) {\n        RCTNetworking.abortRequest(this._requestId);\n      }\n\n      if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {\n        this._reset();\n\n        this.setReadyState(this.DONE);\n      }\n\n      this._reset();\n    }\n  }, {\n    key: \"setResponseHeaders\",\n    value: function setResponseHeaders(responseHeaders) {\n      this.responseHeaders = responseHeaders || null;\n      var headers = responseHeaders || {};\n      this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {\n        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];\n        return lcaseHeaders;\n      }, {});\n    }\n  }, {\n    key: \"setReadyState\",\n    value: function setReadyState(newState) {\n      this.readyState = newState;\n      this.dispatchEvent({\n        type: 'readystatechange'\n      });\n\n      if (newState === this.DONE) {\n        if (this._aborted) {\n          this.dispatchEvent({\n            type: 'abort'\n          });\n        } else if (this._hasError) {\n          if (this._timedOut) {\n            this.dispatchEvent({\n              type: 'timeout'\n            });\n          } else {\n            this.dispatchEvent({\n              type: 'error'\n            });\n          }\n        } else {\n          this.dispatchEvent({\n            type: 'load'\n          });\n        }\n\n        this.dispatchEvent({\n          type: 'loadend'\n        });\n      }\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener) {\n      if (type === 'readystatechange' || type === 'progress') {\n        this._incrementalEvents = true;\n      }\n\n      _get(_getPrototypeOf(XMLHttpRequest.prototype), \"addEventListener\", this).call(this, type, listener);\n    }\n  }], [{\n    key: \"setInterceptor\",\n    value: function setInterceptor(interceptor) {\n      XMLHttpRequest._interceptor = interceptor;\n    }\n  }]);\n\n  return XMLHttpRequest;\n}(EventTarget.apply(void 0, _toConsumableArray(XHR_EVENTS)));\n\nXMLHttpRequest.UNSENT = UNSENT;\nXMLHttpRequest.OPENED = OPENED;\nXMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;\nXMLHttpRequest.LOADING = LOADING;\nXMLHttpRequest.DONE = DONE;\nXMLHttpRequest._interceptor = null;\nmodule.exports = XMLHttpRequest;","map":{"version":3,"names":["BlobManager","require","EventTarget","GlobalPerformanceLogger","RCTNetworking","base64","invariant","warning","DEBUG_NETWORK_SEND_DELAY","isAvailable","addNetworkingHandler","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE","SUPPORTED_RESPONSE_TYPES","arraybuffer","global","ArrayBuffer","blob","Blob","document","json","text","REQUEST_EVENTS","XHR_EVENTS","concat","XMLHttpRequestEventTarget","XMLHttpRequest","readyState","status","timeout","withCredentials","upload","_aborted","_hasError","_method","_perfKey","_response","_url","_timedOut","_trackingName","_incrementalEvents","_reset","responseHeaders","undefined","responseURL","_requestId","_cachedResponse","_headers","_responseType","_sent","_lowerCaseResponseHeaders","_clearSubscriptions","responseType","Error","hasOwnProperty","toByteArray","buffer","createFromOptions","createFromParts","JSON","parse","_","requestId","_interceptor","requestSent","progress","total","dispatchEvent","type","lengthComputable","loaded","stopTimespan","setResponseHeaders","setReadyState","responseReceived","response","dataReceived","responseText","__didReceiveDataProgress","error","timeOutError","loadingFailed","loadingFinished","length","_subscriptions","forEach","sub","remove","headers","Object","keys","map","headerName","join","header","value","toLowerCase","String","trackingName","method","url","async","toUpperCase","data","incrementalEvents","onreadystatechange","onprogress","push","addListener","args","__didUploadProgress","__didReceiveResponse","__didReceiveData","__didReceiveIncrementalData","__didCompleteResponse","nativeResponseType","doSend","friendlyName","startTimespan","sendRequest","__didCreateRequest","bind","setTimeout","abortRequest","reduce","lcaseHeaders","newState","listener","interceptor","module","exports"],"sources":["D:/проекты летом 2022/loginapp2/mobile/node_modules/react-native/Libraries/Network/XMLHttpRequest.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst BlobManager = require('../Blob/BlobManager');\nconst EventTarget = require('event-target-shim');\nconst GlobalPerformanceLogger = require('react-native/Libraries/Utilities/GlobalPerformanceLogger');\nconst RCTNetworking = require('./RCTNetworking');\n\nconst base64 = require('base64-js');\nconst invariant = require('invariant');\nconst warning = require('fbjs/lib/warning');\n\nconst DEBUG_NETWORK_SEND_DELAY: false = false; // Set to a number of milliseconds when debugging\n\nexport type NativeResponseType = 'base64' | 'blob' | 'text';\nexport type ResponseType =\n  | ''\n  | 'arraybuffer'\n  | 'blob'\n  | 'document'\n  | 'json'\n  | 'text';\nexport type Response = ?Object | string;\n\ntype XHRInterceptor = {\n  requestSent(id: number, url: string, method: string, headers: Object): void,\n  responseReceived(\n    id: number,\n    url: string,\n    status: number,\n    headers: Object,\n  ): void,\n  dataReceived(id: number, data: string): void,\n  loadingFinished(id: number, encodedDataLength: number): void,\n  loadingFailed(id: number, error: string): void,\n  ...\n};\n\n// The native blob module is optional so inject it here if available.\nif (BlobManager.isAvailable) {\n  BlobManager.addNetworkingHandler();\n}\n\nconst UNSENT = 0;\nconst OPENED = 1;\nconst HEADERS_RECEIVED = 2;\nconst LOADING = 3;\nconst DONE = 4;\n\nconst SUPPORTED_RESPONSE_TYPES = {\n  arraybuffer: typeof global.ArrayBuffer === 'function',\n  blob: typeof global.Blob === 'function',\n  document: false,\n  json: true,\n  text: true,\n  '': true,\n};\n\nconst REQUEST_EVENTS = [\n  'abort',\n  'error',\n  'load',\n  'loadstart',\n  'progress',\n  'timeout',\n  'loadend',\n];\n\nconst XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');\n\nclass XMLHttpRequestEventTarget extends (EventTarget(...REQUEST_EVENTS): any) {\n  onload: ?Function;\n  onloadstart: ?Function;\n  onprogress: ?Function;\n  ontimeout: ?Function;\n  onerror: ?Function;\n  onabort: ?Function;\n  onloadend: ?Function;\n}\n\n/**\n * Shared base for platform-specific XMLHttpRequest implementations.\n */\nclass XMLHttpRequest extends (EventTarget(...XHR_EVENTS): any) {\n  static UNSENT: number = UNSENT;\n  static OPENED: number = OPENED;\n  static HEADERS_RECEIVED: number = HEADERS_RECEIVED;\n  static LOADING: number = LOADING;\n  static DONE: number = DONE;\n\n  static _interceptor: ?XHRInterceptor = null;\n\n  UNSENT: number = UNSENT;\n  OPENED: number = OPENED;\n  HEADERS_RECEIVED: number = HEADERS_RECEIVED;\n  LOADING: number = LOADING;\n  DONE: number = DONE;\n\n  // EventTarget automatically initializes these to `null`.\n  onload: ?Function;\n  onloadstart: ?Function;\n  onprogress: ?Function;\n  ontimeout: ?Function;\n  onerror: ?Function;\n  onabort: ?Function;\n  onloadend: ?Function;\n  onreadystatechange: ?Function;\n\n  readyState: number = UNSENT;\n  responseHeaders: ?Object;\n  status: number = 0;\n  timeout: number = 0;\n  responseURL: ?string;\n  withCredentials: boolean = true;\n\n  upload: XMLHttpRequestEventTarget = new XMLHttpRequestEventTarget();\n\n  _requestId: ?number;\n  _subscriptions: Array<*>;\n\n  _aborted: boolean = false;\n  _cachedResponse: Response;\n  _hasError: boolean = false;\n  _headers: Object;\n  _lowerCaseResponseHeaders: Object;\n  _method: ?string = null;\n  _perfKey: ?string = null;\n  _response: string | ?Object;\n  _responseType: ResponseType;\n  _response: string = '';\n  _sent: boolean;\n  _url: ?string = null;\n  _timedOut: boolean = false;\n  _trackingName: string = 'unknown';\n  _incrementalEvents: boolean = false;\n\n  static setInterceptor(interceptor: ?XHRInterceptor) {\n    XMLHttpRequest._interceptor = interceptor;\n  }\n\n  constructor() {\n    super();\n    this._reset();\n  }\n\n  _reset(): void {\n    this.readyState = this.UNSENT;\n    this.responseHeaders = undefined;\n    this.status = 0;\n    delete this.responseURL;\n\n    this._requestId = null;\n\n    this._cachedResponse = undefined;\n    this._hasError = false;\n    this._headers = {};\n    this._response = '';\n    this._responseType = '';\n    this._sent = false;\n    this._lowerCaseResponseHeaders = {};\n\n    this._clearSubscriptions();\n    this._timedOut = false;\n  }\n\n  get responseType(): ResponseType {\n    return this._responseType;\n  }\n\n  set responseType(responseType: ResponseType): void {\n    if (this._sent) {\n      throw new Error(\n        \"Failed to set the 'responseType' property on 'XMLHttpRequest': The \" +\n          'response type cannot be set after the request has been sent.',\n      );\n    }\n    if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {\n      warning(\n        false,\n        `The provided value '${responseType}' is not a valid 'responseType'.`,\n      );\n      return;\n    }\n\n    // redboxes early, e.g. for 'arraybuffer' on ios 7\n    invariant(\n      SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document',\n      `The provided value '${responseType}' is unsupported in this environment.`,\n    );\n\n    if (responseType === 'blob') {\n      invariant(\n        BlobManager.isAvailable,\n        'Native module BlobModule is required for blob support',\n      );\n    }\n    this._responseType = responseType;\n  }\n\n  get responseText(): string {\n    if (this._responseType !== '' && this._responseType !== 'text') {\n      throw new Error(\n        \"The 'responseText' property is only available if 'responseType' \" +\n          `is set to '' or 'text', but it is '${this._responseType}'.`,\n      );\n    }\n    if (this.readyState < LOADING) {\n      return '';\n    }\n    return this._response;\n  }\n\n  get response(): Response {\n    const {responseType} = this;\n    if (responseType === '' || responseType === 'text') {\n      return this.readyState < LOADING || this._hasError ? '' : this._response;\n    }\n\n    if (this.readyState !== DONE) {\n      return null;\n    }\n\n    if (this._cachedResponse !== undefined) {\n      return this._cachedResponse;\n    }\n\n    switch (responseType) {\n      case 'document':\n        this._cachedResponse = null;\n        break;\n\n      case 'arraybuffer':\n        this._cachedResponse = base64.toByteArray(this._response).buffer;\n        break;\n\n      case 'blob':\n        if (typeof this._response === 'object' && this._response) {\n          this._cachedResponse = BlobManager.createFromOptions(this._response);\n        } else if (this._response === '') {\n          this._cachedResponse = BlobManager.createFromParts([]);\n        } else {\n          throw new Error(`Invalid response for blob: ${this._response}`);\n        }\n        break;\n\n      case 'json':\n        try {\n          this._cachedResponse = JSON.parse(this._response);\n        } catch (_) {\n          this._cachedResponse = null;\n        }\n        break;\n\n      default:\n        this._cachedResponse = null;\n    }\n\n    return this._cachedResponse;\n  }\n\n  // exposed for testing\n  __didCreateRequest(requestId: number): void {\n    this._requestId = requestId;\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.requestSent(\n        requestId,\n        this._url || '',\n        this._method || 'GET',\n        this._headers,\n      );\n  }\n\n  // exposed for testing\n  __didUploadProgress(\n    requestId: number,\n    progress: number,\n    total: number,\n  ): void {\n    if (requestId === this._requestId) {\n      this.upload.dispatchEvent({\n        type: 'progress',\n        lengthComputable: true,\n        loaded: progress,\n        total,\n      });\n    }\n  }\n\n  __didReceiveResponse(\n    requestId: number,\n    status: number,\n    responseHeaders: ?Object,\n    responseURL: ?string,\n  ): void {\n    if (requestId === this._requestId) {\n      this._perfKey != null &&\n        GlobalPerformanceLogger.stopTimespan(this._perfKey);\n      this.status = status;\n      this.setResponseHeaders(responseHeaders);\n      this.setReadyState(this.HEADERS_RECEIVED);\n      if (responseURL || responseURL === '') {\n        this.responseURL = responseURL;\n      } else {\n        delete this.responseURL;\n      }\n\n      XMLHttpRequest._interceptor &&\n        XMLHttpRequest._interceptor.responseReceived(\n          requestId,\n          responseURL || this._url || '',\n          status,\n          responseHeaders || {},\n        );\n    }\n  }\n\n  __didReceiveData(requestId: number, response: string): void {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    this._response = response;\n    this._cachedResponse = undefined; // force lazy recomputation\n    this.setReadyState(this.LOADING);\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.dataReceived(requestId, response);\n  }\n\n  __didReceiveIncrementalData(\n    requestId: number,\n    responseText: string,\n    progress: number,\n    total: number,\n  ) {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    if (!this._response) {\n      this._response = responseText;\n    } else {\n      this._response += responseText;\n    }\n\n    XMLHttpRequest._interceptor &&\n      XMLHttpRequest._interceptor.dataReceived(requestId, responseText);\n\n    this.setReadyState(this.LOADING);\n    this.__didReceiveDataProgress(requestId, progress, total);\n  }\n\n  __didReceiveDataProgress(\n    requestId: number,\n    loaded: number,\n    total: number,\n  ): void {\n    if (requestId !== this._requestId) {\n      return;\n    }\n    this.dispatchEvent({\n      type: 'progress',\n      lengthComputable: total >= 0,\n      loaded,\n      total,\n    });\n  }\n\n  // exposed for testing\n  __didCompleteResponse(\n    requestId: number,\n    error: string,\n    timeOutError: boolean,\n  ): void {\n    if (requestId === this._requestId) {\n      if (error) {\n        if (this._responseType === '' || this._responseType === 'text') {\n          this._response = error;\n        }\n        this._hasError = true;\n        if (timeOutError) {\n          this._timedOut = true;\n        }\n      }\n      this._clearSubscriptions();\n      this._requestId = null;\n      this.setReadyState(this.DONE);\n\n      if (error) {\n        XMLHttpRequest._interceptor &&\n          XMLHttpRequest._interceptor.loadingFailed(requestId, error);\n      } else {\n        XMLHttpRequest._interceptor &&\n          XMLHttpRequest._interceptor.loadingFinished(\n            requestId,\n            this._response.length,\n          );\n      }\n    }\n  }\n\n  _clearSubscriptions(): void {\n    (this._subscriptions || []).forEach(sub => {\n      if (sub) {\n        sub.remove();\n      }\n    });\n    this._subscriptions = [];\n  }\n\n  getAllResponseHeaders(): ?string {\n    if (!this.responseHeaders) {\n      // according to the spec, return null if no response has been received\n      return null;\n    }\n    const headers = this.responseHeaders || {};\n    return Object.keys(headers)\n      .map(headerName => {\n        return headerName + ': ' + headers[headerName];\n      })\n      .join('\\r\\n');\n  }\n\n  getResponseHeader(header: string): ?string {\n    const value = this._lowerCaseResponseHeaders[header.toLowerCase()];\n    return value !== undefined ? value : null;\n  }\n\n  setRequestHeader(header: string, value: any): void {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('Request has not been opened');\n    }\n    this._headers[header.toLowerCase()] = String(value);\n  }\n\n  /**\n   * Custom extension for tracking origins of request.\n   */\n  setTrackingName(trackingName: string): XMLHttpRequest {\n    this._trackingName = trackingName;\n    return this;\n  }\n\n  open(method: string, url: string, async: ?boolean): void {\n    /* Other optional arguments are not supported yet */\n    if (this.readyState !== this.UNSENT) {\n      throw new Error('Cannot open, already sending');\n    }\n    if (async !== undefined && !async) {\n      // async is default\n      throw new Error('Synchronous http requests are not supported');\n    }\n    if (!url) {\n      throw new Error('Cannot load an empty url');\n    }\n    this._method = method.toUpperCase();\n    this._url = url;\n    this._aborted = false;\n    this.setReadyState(this.OPENED);\n  }\n\n  send(data: any): void {\n    if (this.readyState !== this.OPENED) {\n      throw new Error('Request has not been opened');\n    }\n    if (this._sent) {\n      throw new Error('Request has already been sent');\n    }\n    this._sent = true;\n    const incrementalEvents =\n      this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;\n\n    this._subscriptions.push(\n      RCTNetworking.addListener('didSendNetworkData', args =>\n        this.__didUploadProgress(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkResponse', args =>\n        this.__didReceiveResponse(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkData', args =>\n        this.__didReceiveData(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkIncrementalData', args =>\n        this.__didReceiveIncrementalData(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didReceiveNetworkDataProgress', args =>\n        this.__didReceiveDataProgress(...args),\n      ),\n    );\n    this._subscriptions.push(\n      RCTNetworking.addListener('didCompleteNetworkResponse', args =>\n        this.__didCompleteResponse(...args),\n      ),\n    );\n\n    let nativeResponseType: NativeResponseType = 'text';\n    if (this._responseType === 'arraybuffer') {\n      nativeResponseType = 'base64';\n    }\n    if (this._responseType === 'blob') {\n      nativeResponseType = 'blob';\n    }\n\n    const doSend = () => {\n      const friendlyName =\n        this._trackingName !== 'unknown' ? this._trackingName : this._url;\n      this._perfKey = 'network_XMLHttpRequest_' + String(friendlyName);\n      GlobalPerformanceLogger.startTimespan(this._perfKey);\n      invariant(\n        this._method,\n        'XMLHttpRequest method needs to be defined (%s).',\n        friendlyName,\n      );\n      invariant(\n        this._url,\n        'XMLHttpRequest URL needs to be defined (%s).',\n        friendlyName,\n      );\n      RCTNetworking.sendRequest(\n        this._method,\n        this._trackingName,\n        this._url,\n        this._headers,\n        data,\n        /* $FlowFixMe(>=0.78.0 site=react_native_android_fb) This issue was found\n         * when making Flow check .android.js files. */\n        nativeResponseType,\n        incrementalEvents,\n        this.timeout,\n        this.__didCreateRequest.bind(this),\n        this.withCredentials,\n      );\n    };\n    if (DEBUG_NETWORK_SEND_DELAY) {\n      setTimeout(doSend, DEBUG_NETWORK_SEND_DELAY);\n    } else {\n      doSend();\n    }\n  }\n\n  abort(): void {\n    this._aborted = true;\n    if (this._requestId) {\n      RCTNetworking.abortRequest(this._requestId);\n    }\n    // only call onreadystatechange if there is something to abort,\n    // below logic is per spec\n    if (\n      !(\n        this.readyState === this.UNSENT ||\n        (this.readyState === this.OPENED && !this._sent) ||\n        this.readyState === this.DONE\n      )\n    ) {\n      this._reset();\n      this.setReadyState(this.DONE);\n    }\n    // Reset again after, in case modified in handler\n    this._reset();\n  }\n\n  setResponseHeaders(responseHeaders: ?Object): void {\n    this.responseHeaders = responseHeaders || null;\n    const headers = responseHeaders || {};\n    this._lowerCaseResponseHeaders = Object.keys(headers).reduce(\n      (lcaseHeaders, headerName) => {\n        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];\n        return lcaseHeaders;\n      },\n      {},\n    );\n  }\n\n  setReadyState(newState: number): void {\n    this.readyState = newState;\n    this.dispatchEvent({type: 'readystatechange'});\n    if (newState === this.DONE) {\n      if (this._aborted) {\n        this.dispatchEvent({type: 'abort'});\n      } else if (this._hasError) {\n        if (this._timedOut) {\n          this.dispatchEvent({type: 'timeout'});\n        } else {\n          this.dispatchEvent({type: 'error'});\n        }\n      } else {\n        this.dispatchEvent({type: 'load'});\n      }\n      this.dispatchEvent({type: 'loadend'});\n    }\n  }\n\n  /* global EventListener */\n  addEventListener(type: string, listener: EventListener): void {\n    // If we dont' have a 'readystatechange' event handler, we don't\n    // have to send repeated LOADING events with incremental updates\n    // to responseText, which will avoid a bunch of native -> JS\n    // bridge traffic.\n    if (type === 'readystatechange' || type === 'progress') {\n      this._incrementalEvents = true;\n    }\n    super.addEventListener(type, listener);\n  }\n}\n\nmodule.exports = XMLHttpRequest;\n"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAGC,OAAO,uBAA3B;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAME,uBAAuB,GAAGF,OAAO,CAAC,0DAAD,CAAvC;;AACA,IAAMG,aAAa,GAAGH,OAAO,mBAA7B;;AAEA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMK,SAAS,GAAGL,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMM,OAAO,GAAGN,OAAO,CAAC,kBAAD,CAAvB;;AAEA,IAAMO,wBAA+B,GAAG,KAAxC;;AA2BA,IAAIR,WAAW,CAACS,WAAhB,EAA6B;EAC3BT,WAAW,CAACU,oBAAZ;AACD;;AAED,IAAMC,MAAM,GAAG,CAAf;AACA,IAAMC,MAAM,GAAG,CAAf;AACA,IAAMC,gBAAgB,GAAG,CAAzB;AACA,IAAMC,OAAO,GAAG,CAAhB;AACA,IAAMC,IAAI,GAAG,CAAb;AAEA,IAAMC,wBAAwB,GAAG;EAC/BC,WAAW,EAAE,OAAOC,MAAM,CAACC,WAAd,KAA8B,UADZ;EAE/BC,IAAI,EAAE,OAAOF,MAAM,CAACG,IAAd,KAAuB,UAFE;EAG/BC,QAAQ,EAAE,KAHqB;EAI/BC,IAAI,EAAE,IAJyB;EAK/BC,IAAI,EAAE,IALyB;EAM/B,IAAI;AAN2B,CAAjC;AASA,IAAMC,cAAc,GAAG,CACrB,OADqB,EAErB,OAFqB,EAGrB,MAHqB,EAIrB,WAJqB,EAKrB,UALqB,EAMrB,SANqB,EAOrB,SAPqB,CAAvB;AAUA,IAAMC,UAAU,GAAGD,cAAc,CAACE,MAAf,CAAsB,kBAAtB,CAAnB;;IAEMC,yB;;;;;;;;;;;;EAAmC1B,WAAW,MAAX,SAAeuB,cAAf,C;;IAanCI,c;;;;;EAyDJ,0BAAc;IAAA;;IAAA;;IACZ;IADY,MAhDdlB,MAgDc,GAhDGA,MAgDH;IAAA,MA/CdC,MA+Cc,GA/CGA,MA+CH;IAAA,MA9CdC,gBA8Cc,GA9CaA,gBA8Cb;IAAA,MA7CdC,OA6Cc,GA7CIA,OA6CJ;IAAA,MA5CdC,IA4Cc,GA5CCA,IA4CD;IAAA,MAhCde,UAgCc,GAhCOnB,MAgCP;IAAA,MA9BdoB,MA8Bc,GA9BG,CA8BH;IAAA,MA7BdC,OA6Bc,GA7BI,CA6BJ;IAAA,MA3BdC,eA2Bc,GA3Ba,IA2Bb;IAAA,MAzBdC,MAyBc,GAzBsB,IAAIN,yBAAJ,EAyBtB;IAAA,MApBdO,QAoBc,GApBM,KAoBN;IAAA,MAlBdC,SAkBc,GAlBO,KAkBP;IAAA,MAfdC,OAec,GAfK,IAeL;IAAA,MAddC,QAcc,GAdM,IAcN;IAAA,MAXdC,SAWc,GAXM,EAWN;IAAA,MATdC,IASc,GATE,IASF;IAAA,MARdC,SAQc,GARO,KAQP;IAAA,MAPdC,aAOc,GAPU,SAOV;IAAA,MANdC,kBAMc,GANgB,KAMhB;;IAEZ,MAAKC,MAAL;;IAFY;EAGb;;;;WAED,kBAAe;MACb,KAAKd,UAAL,GAAkB,KAAKnB,MAAvB;MACA,KAAKkC,eAAL,GAAuBC,SAAvB;MACA,KAAKf,MAAL,GAAc,CAAd;MACA,OAAO,KAAKgB,WAAZ;MAEA,KAAKC,UAAL,GAAkB,IAAlB;MAEA,KAAKC,eAAL,GAAuBH,SAAvB;MACA,KAAKV,SAAL,GAAiB,KAAjB;MACA,KAAKc,QAAL,GAAgB,EAAhB;MACA,KAAKX,SAAL,GAAiB,EAAjB;MACA,KAAKY,aAAL,GAAqB,EAArB;MACA,KAAKC,KAAL,GAAa,KAAb;MACA,KAAKC,yBAAL,GAAiC,EAAjC;;MAEA,KAAKC,mBAAL;;MACA,KAAKb,SAAL,GAAiB,KAAjB;IACD;;;SAED,eAAiC;MAC/B,OAAO,KAAKU,aAAZ;IACD,C;SAED,aAAiBI,YAAjB,EAAmD;MACjD,IAAI,KAAKH,KAAT,EAAgB;QACd,MAAM,IAAII,KAAJ,CACJ,wEACE,8DAFE,CAAN;MAID;;MACD,IAAI,CAACxC,wBAAwB,CAACyC,cAAzB,CAAwCF,YAAxC,CAAL,EAA4D;QAC1DhD,OAAO,CACL,KADK,2BAEkBgD,YAFlB,sCAAP;QAIA;MACD;;MAGDjD,SAAS,CACPU,wBAAwB,CAACuC,YAAD,CAAxB,IAA0CA,YAAY,KAAK,UADpD,2BAEgBA,YAFhB,2CAAT;;MAKA,IAAIA,YAAY,KAAK,MAArB,EAA6B;QAC3BjD,SAAS,CACPN,WAAW,CAACS,WADL,EAEP,uDAFO,CAAT;MAID;;MACD,KAAK0C,aAAL,GAAqBI,YAArB;IACD;;;SAED,eAA2B;MACzB,IAAI,KAAKJ,aAAL,KAAuB,EAAvB,IAA6B,KAAKA,aAAL,KAAuB,MAAxD,EAAgE;QAC9D,MAAM,IAAIK,KAAJ,CACJ,8GACwC,KAAKL,aAD7C,QADI,CAAN;MAID;;MACD,IAAI,KAAKrB,UAAL,GAAkBhB,OAAtB,EAA+B;QAC7B,OAAO,EAAP;MACD;;MACD,OAAO,KAAKyB,SAAZ;IACD;;;SAED,eAAyB;MACvB,IAAOgB,YAAP,GAAuB,IAAvB,CAAOA,YAAP;;MACA,IAAIA,YAAY,KAAK,EAAjB,IAAuBA,YAAY,KAAK,MAA5C,EAAoD;QAClD,OAAO,KAAKzB,UAAL,GAAkBhB,OAAlB,IAA6B,KAAKsB,SAAlC,GAA8C,EAA9C,GAAmD,KAAKG,SAA/D;MACD;;MAED,IAAI,KAAKT,UAAL,KAAoBf,IAAxB,EAA8B;QAC5B,OAAO,IAAP;MACD;;MAED,IAAI,KAAKkC,eAAL,KAAyBH,SAA7B,EAAwC;QACtC,OAAO,KAAKG,eAAZ;MACD;;MAED,QAAQM,YAAR;QACE,KAAK,UAAL;UACE,KAAKN,eAAL,GAAuB,IAAvB;UACA;;QAEF,KAAK,aAAL;UACE,KAAKA,eAAL,GAAuB5C,MAAM,CAACqD,WAAP,CAAmB,KAAKnB,SAAxB,EAAmCoB,MAA1D;UACA;;QAEF,KAAK,MAAL;UACE,IAAI,OAAO,KAAKpB,SAAZ,KAA0B,QAA1B,IAAsC,KAAKA,SAA/C,EAA0D;YACxD,KAAKU,eAAL,GAAuBjD,WAAW,CAAC4D,iBAAZ,CAA8B,KAAKrB,SAAnC,CAAvB;UACD,CAFD,MAEO,IAAI,KAAKA,SAAL,KAAmB,EAAvB,EAA2B;YAChC,KAAKU,eAAL,GAAuBjD,WAAW,CAAC6D,eAAZ,CAA4B,EAA5B,CAAvB;UACD,CAFM,MAEA;YACL,MAAM,IAAIL,KAAJ,iCAAwC,KAAKjB,SAA7C,CAAN;UACD;;UACD;;QAEF,KAAK,MAAL;UACE,IAAI;YACF,KAAKU,eAAL,GAAuBa,IAAI,CAACC,KAAL,CAAW,KAAKxB,SAAhB,CAAvB;UACD,CAFD,CAEE,OAAOyB,CAAP,EAAU;YACV,KAAKf,eAAL,GAAuB,IAAvB;UACD;;UACD;;QAEF;UACE,KAAKA,eAAL,GAAuB,IAAvB;MA5BJ;;MA+BA,OAAO,KAAKA,eAAZ;IACD;;;WAGD,4BAAmBgB,SAAnB,EAA4C;MAC1C,KAAKjB,UAAL,GAAkBiB,SAAlB;MAEApC,cAAc,CAACqC,YAAf,IACErC,cAAc,CAACqC,YAAf,CAA4BC,WAA5B,CACEF,SADF,EAEE,KAAKzB,IAAL,IAAa,EAFf,EAGE,KAAKH,OAAL,IAAgB,KAHlB,EAIE,KAAKa,QAJP,CADF;IAOD;;;WAGD,6BACEe,SADF,EAEEG,QAFF,EAGEC,KAHF,EAIQ;MACN,IAAIJ,SAAS,KAAK,KAAKjB,UAAvB,EAAmC;QACjC,KAAKd,MAAL,CAAYoC,aAAZ,CAA0B;UACxBC,IAAI,EAAE,UADkB;UAExBC,gBAAgB,EAAE,IAFM;UAGxBC,MAAM,EAAEL,QAHgB;UAIxBC,KAAK,EAALA;QAJwB,CAA1B;MAMD;IACF;;;WAED,8BACEJ,SADF,EAEElC,MAFF,EAGEc,eAHF,EAIEE,WAJF,EAKQ;MACN,IAAIkB,SAAS,KAAK,KAAKjB,UAAvB,EAAmC;QACjC,KAAKV,QAAL,IAAiB,IAAjB,IACEnC,uBAAuB,CAACuE,YAAxB,CAAqC,KAAKpC,QAA1C,CADF;QAEA,KAAKP,MAAL,GAAcA,MAAd;QACA,KAAK4C,kBAAL,CAAwB9B,eAAxB;QACA,KAAK+B,aAAL,CAAmB,KAAK/D,gBAAxB;;QACA,IAAIkC,WAAW,IAAIA,WAAW,KAAK,EAAnC,EAAuC;UACrC,KAAKA,WAAL,GAAmBA,WAAnB;QACD,CAFD,MAEO;UACL,OAAO,KAAKA,WAAZ;QACD;;QAEDlB,cAAc,CAACqC,YAAf,IACErC,cAAc,CAACqC,YAAf,CAA4BW,gBAA5B,CACEZ,SADF,EAEElB,WAAW,IAAI,KAAKP,IAApB,IAA4B,EAF9B,EAGET,MAHF,EAIEc,eAAe,IAAI,EAJrB,CADF;MAOD;IACF;;;WAED,0BAAiBoB,SAAjB,EAAoCa,QAApC,EAA4D;MAC1D,IAAIb,SAAS,KAAK,KAAKjB,UAAvB,EAAmC;QACjC;MACD;;MACD,KAAKT,SAAL,GAAiBuC,QAAjB;MACA,KAAK7B,eAAL,GAAuBH,SAAvB;MACA,KAAK8B,aAAL,CAAmB,KAAK9D,OAAxB;MAEAe,cAAc,CAACqC,YAAf,IACErC,cAAc,CAACqC,YAAf,CAA4Ba,YAA5B,CAAyCd,SAAzC,EAAoDa,QAApD,CADF;IAED;;;WAED,qCACEb,SADF,EAEEe,YAFF,EAGEZ,QAHF,EAIEC,KAJF,EAKE;MACA,IAAIJ,SAAS,KAAK,KAAKjB,UAAvB,EAAmC;QACjC;MACD;;MACD,IAAI,CAAC,KAAKT,SAAV,EAAqB;QACnB,KAAKA,SAAL,GAAiByC,YAAjB;MACD,CAFD,MAEO;QACL,KAAKzC,SAAL,IAAkByC,YAAlB;MACD;;MAEDnD,cAAc,CAACqC,YAAf,IACErC,cAAc,CAACqC,YAAf,CAA4Ba,YAA5B,CAAyCd,SAAzC,EAAoDe,YAApD,CADF;MAGA,KAAKJ,aAAL,CAAmB,KAAK9D,OAAxB;;MACA,KAAKmE,wBAAL,CAA8BhB,SAA9B,EAAyCG,QAAzC,EAAmDC,KAAnD;IACD;;;WAED,kCACEJ,SADF,EAEEQ,MAFF,EAGEJ,KAHF,EAIQ;MACN,IAAIJ,SAAS,KAAK,KAAKjB,UAAvB,EAAmC;QACjC;MACD;;MACD,KAAKsB,aAAL,CAAmB;QACjBC,IAAI,EAAE,UADW;QAEjBC,gBAAgB,EAAEH,KAAK,IAAI,CAFV;QAGjBI,MAAM,EAANA,MAHiB;QAIjBJ,KAAK,EAALA;MAJiB,CAAnB;IAMD;;;WAGD,+BACEJ,SADF,EAEEiB,KAFF,EAGEC,YAHF,EAIQ;MACN,IAAIlB,SAAS,KAAK,KAAKjB,UAAvB,EAAmC;QACjC,IAAIkC,KAAJ,EAAW;UACT,IAAI,KAAK/B,aAAL,KAAuB,EAAvB,IAA6B,KAAKA,aAAL,KAAuB,MAAxD,EAAgE;YAC9D,KAAKZ,SAAL,GAAiB2C,KAAjB;UACD;;UACD,KAAK9C,SAAL,GAAiB,IAAjB;;UACA,IAAI+C,YAAJ,EAAkB;YAChB,KAAK1C,SAAL,GAAiB,IAAjB;UACD;QACF;;QACD,KAAKa,mBAAL;;QACA,KAAKN,UAAL,GAAkB,IAAlB;QACA,KAAK4B,aAAL,CAAmB,KAAK7D,IAAxB;;QAEA,IAAImE,KAAJ,EAAW;UACTrD,cAAc,CAACqC,YAAf,IACErC,cAAc,CAACqC,YAAf,CAA4BkB,aAA5B,CAA0CnB,SAA1C,EAAqDiB,KAArD,CADF;QAED,CAHD,MAGO;UACLrD,cAAc,CAACqC,YAAf,IACErC,cAAc,CAACqC,YAAf,CAA4BmB,eAA5B,CACEpB,SADF,EAEE,KAAK1B,SAAL,CAAe+C,MAFjB,CADF;QAKD;MACF;IACF;;;WAED,+BAA4B;MAC1B,CAAC,KAAKC,cAAL,IAAuB,EAAxB,EAA4BC,OAA5B,CAAoC,UAAAC,GAAG,EAAI;QACzC,IAAIA,GAAJ,EAAS;UACPA,GAAG,CAACC,MAAJ;QACD;MACF,CAJD;MAKA,KAAKH,cAAL,GAAsB,EAAtB;IACD;;;WAED,iCAAiC;MAC/B,IAAI,CAAC,KAAK1C,eAAV,EAA2B;QAEzB,OAAO,IAAP;MACD;;MACD,IAAM8C,OAAO,GAAG,KAAK9C,eAAL,IAAwB,EAAxC;MACA,OAAO+C,MAAM,CAACC,IAAP,CAAYF,OAAZ,EACJG,GADI,CACA,UAAAC,UAAU,EAAI;QACjB,OAAOA,UAAU,GAAG,IAAb,GAAoBJ,OAAO,CAACI,UAAD,CAAlC;MACD,CAHI,EAIJC,IAJI,CAIC,MAJD,CAAP;IAKD;;;WAED,2BAAkBC,MAAlB,EAA2C;MACzC,IAAMC,KAAK,GAAG,KAAK7C,yBAAL,CAA+B4C,MAAM,CAACE,WAAP,EAA/B,CAAd;;MACA,OAAOD,KAAK,KAAKpD,SAAV,GAAsBoD,KAAtB,GAA8B,IAArC;IACD;;;WAED,0BAAiBD,MAAjB,EAAiCC,KAAjC,EAAmD;MACjD,IAAI,KAAKpE,UAAL,KAAoB,KAAKlB,MAA7B,EAAqC;QACnC,MAAM,IAAI4C,KAAJ,CAAU,6BAAV,CAAN;MACD;;MACD,KAAKN,QAAL,CAAc+C,MAAM,CAACE,WAAP,EAAd,IAAsCC,MAAM,CAACF,KAAD,CAA5C;IACD;;;WAKD,yBAAgBG,YAAhB,EAAsD;MACpD,KAAK3D,aAAL,GAAqB2D,YAArB;MACA,OAAO,IAAP;IACD;;;WAED,cAAKC,MAAL,EAAqBC,GAArB,EAAkCC,KAAlC,EAAyD;MAEvD,IAAI,KAAK1E,UAAL,KAAoB,KAAKnB,MAA7B,EAAqC;QACnC,MAAM,IAAI6C,KAAJ,CAAU,8BAAV,CAAN;MACD;;MACD,IAAIgD,KAAK,KAAK1D,SAAV,IAAuB,CAAC0D,KAA5B,EAAmC;QAEjC,MAAM,IAAIhD,KAAJ,CAAU,6CAAV,CAAN;MACD;;MACD,IAAI,CAAC+C,GAAL,EAAU;QACR,MAAM,IAAI/C,KAAJ,CAAU,0BAAV,CAAN;MACD;;MACD,KAAKnB,OAAL,GAAeiE,MAAM,CAACG,WAAP,EAAf;MACA,KAAKjE,IAAL,GAAY+D,GAAZ;MACA,KAAKpE,QAAL,GAAgB,KAAhB;MACA,KAAKyC,aAAL,CAAmB,KAAKhE,MAAxB;IACD;;;WAED,cAAK8F,IAAL,EAAsB;MAAA;;MACpB,IAAI,KAAK5E,UAAL,KAAoB,KAAKlB,MAA7B,EAAqC;QACnC,MAAM,IAAI4C,KAAJ,CAAU,6BAAV,CAAN;MACD;;MACD,IAAI,KAAKJ,KAAT,EAAgB;QACd,MAAM,IAAII,KAAJ,CAAU,+BAAV,CAAN;MACD;;MACD,KAAKJ,KAAL,GAAa,IAAb;MACA,IAAMuD,iBAAiB,GACrB,KAAKhE,kBAAL,IAA2B,CAAC,CAAC,KAAKiE,kBAAlC,IAAwD,CAAC,CAAC,KAAKC,UADjE;;MAGA,KAAKtB,cAAL,CAAoBuB,IAApB,CACE1G,aAAa,CAAC2G,WAAd,CAA0B,oBAA1B,EAAgD,UAAAC,IAAI;QAAA,OAClD,MAAI,CAACC,mBAAL,aAAI,qBAAwBD,IAAxB,EAD8C;MAAA,CAApD,CADF;;MAKA,KAAKzB,cAAL,CAAoBuB,IAApB,CACE1G,aAAa,CAAC2G,WAAd,CAA0B,2BAA1B,EAAuD,UAAAC,IAAI;QAAA,OACzD,MAAI,CAACE,oBAAL,aAAI,qBAAyBF,IAAzB,EADqD;MAAA,CAA3D,CADF;;MAKA,KAAKzB,cAAL,CAAoBuB,IAApB,CACE1G,aAAa,CAAC2G,WAAd,CAA0B,uBAA1B,EAAmD,UAAAC,IAAI;QAAA,OACrD,MAAI,CAACG,gBAAL,aAAI,qBAAqBH,IAArB,EADiD;MAAA,CAAvD,CADF;;MAKA,KAAKzB,cAAL,CAAoBuB,IAApB,CACE1G,aAAa,CAAC2G,WAAd,CAA0B,kCAA1B,EAA8D,UAAAC,IAAI;QAAA,OAChE,MAAI,CAACI,2BAAL,aAAI,qBAAgCJ,IAAhC,EAD4D;MAAA,CAAlE,CADF;;MAKA,KAAKzB,cAAL,CAAoBuB,IAApB,CACE1G,aAAa,CAAC2G,WAAd,CAA0B,+BAA1B,EAA2D,UAAAC,IAAI;QAAA,OAC7D,MAAI,CAAC/B,wBAAL,aAAI,qBAA6B+B,IAA7B,EADyD;MAAA,CAA/D,CADF;;MAKA,KAAKzB,cAAL,CAAoBuB,IAApB,CACE1G,aAAa,CAAC2G,WAAd,CAA0B,4BAA1B,EAAwD,UAAAC,IAAI;QAAA,OAC1D,MAAI,CAACK,qBAAL,aAAI,qBAA0BL,IAA1B,EADsD;MAAA,CAA5D,CADF;;MAMA,IAAIM,kBAAsC,GAAG,MAA7C;;MACA,IAAI,KAAKnE,aAAL,KAAuB,aAA3B,EAA0C;QACxCmE,kBAAkB,GAAG,QAArB;MACD;;MACD,IAAI,KAAKnE,aAAL,KAAuB,MAA3B,EAAmC;QACjCmE,kBAAkB,GAAG,MAArB;MACD;;MAED,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;QACnB,IAAMC,YAAY,GAChB,MAAI,CAAC9E,aAAL,KAAuB,SAAvB,GAAmC,MAAI,CAACA,aAAxC,GAAwD,MAAI,CAACF,IAD/D;QAEA,MAAI,CAACF,QAAL,GAAgB,4BAA4B8D,MAAM,CAACoB,YAAD,CAAlD;QACArH,uBAAuB,CAACsH,aAAxB,CAAsC,MAAI,CAACnF,QAA3C;QACAhC,SAAS,CACP,MAAI,CAAC+B,OADE,EAEP,iDAFO,EAGPmF,YAHO,CAAT;QAKAlH,SAAS,CACP,MAAI,CAACkC,IADE,EAEP,8CAFO,EAGPgF,YAHO,CAAT;QAKApH,aAAa,CAACsH,WAAd,CACE,MAAI,CAACrF,OADP,EAEE,MAAI,CAACK,aAFP,EAGE,MAAI,CAACF,IAHP,EAIE,MAAI,CAACU,QAJP,EAKEwD,IALF,EAQEY,kBARF,EASEX,iBATF,EAUE,MAAI,CAAC3E,OAVP,EAWE,MAAI,CAAC2F,kBAAL,CAAwBC,IAAxB,CAA6B,MAA7B,CAXF,EAYE,MAAI,CAAC3F,eAZP;MAcD,CA7BD;;MA8BA,IAAIzB,wBAAJ,EAA8B;QAC5BqH,UAAU,CAACN,MAAD,EAAS/G,wBAAT,CAAV;MACD,CAFD,MAEO;QACL+G,MAAM;MACP;IACF;;;WAED,iBAAc;MACZ,KAAKpF,QAAL,GAAgB,IAAhB;;MACA,IAAI,KAAKa,UAAT,EAAqB;QACnB5C,aAAa,CAAC0H,YAAd,CAA2B,KAAK9E,UAAhC;MACD;;MAGD,IACE,EACE,KAAKlB,UAAL,KAAoB,KAAKnB,MAAzB,IACC,KAAKmB,UAAL,KAAoB,KAAKlB,MAAzB,IAAmC,CAAC,KAAKwC,KAD1C,IAEA,KAAKtB,UAAL,KAAoB,KAAKf,IAH3B,CADF,EAME;QACA,KAAK6B,MAAL;;QACA,KAAKgC,aAAL,CAAmB,KAAK7D,IAAxB;MACD;;MAED,KAAK6B,MAAL;IACD;;;WAED,4BAAmBC,eAAnB,EAAmD;MACjD,KAAKA,eAAL,GAAuBA,eAAe,IAAI,IAA1C;MACA,IAAM8C,OAAO,GAAG9C,eAAe,IAAI,EAAnC;MACA,KAAKQ,yBAAL,GAAiCuC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBoC,MAArB,CAC/B,UAACC,YAAD,EAAejC,UAAf,EAA8B;QAC5BiC,YAAY,CAACjC,UAAU,CAACI,WAAX,EAAD,CAAZ,GAAyCR,OAAO,CAACI,UAAD,CAAhD;QACA,OAAOiC,YAAP;MACD,CAJ8B,EAK/B,EAL+B,CAAjC;IAOD;;;WAED,uBAAcC,QAAd,EAAsC;MACpC,KAAKnG,UAAL,GAAkBmG,QAAlB;MACA,KAAK3D,aAAL,CAAmB;QAACC,IAAI,EAAE;MAAP,CAAnB;;MACA,IAAI0D,QAAQ,KAAK,KAAKlH,IAAtB,EAA4B;QAC1B,IAAI,KAAKoB,QAAT,EAAmB;UACjB,KAAKmC,aAAL,CAAmB;YAACC,IAAI,EAAE;UAAP,CAAnB;QACD,CAFD,MAEO,IAAI,KAAKnC,SAAT,EAAoB;UACzB,IAAI,KAAKK,SAAT,EAAoB;YAClB,KAAK6B,aAAL,CAAmB;cAACC,IAAI,EAAE;YAAP,CAAnB;UACD,CAFD,MAEO;YACL,KAAKD,aAAL,CAAmB;cAACC,IAAI,EAAE;YAAP,CAAnB;UACD;QACF,CANM,MAMA;UACL,KAAKD,aAAL,CAAmB;YAACC,IAAI,EAAE;UAAP,CAAnB;QACD;;QACD,KAAKD,aAAL,CAAmB;UAACC,IAAI,EAAE;QAAP,CAAnB;MACD;IACF;;;WAGD,0BAAiBA,IAAjB,EAA+B2D,QAA/B,EAA8D;MAK5D,IAAI3D,IAAI,KAAK,kBAAT,IAA+BA,IAAI,KAAK,UAA5C,EAAwD;QACtD,KAAK5B,kBAAL,GAA0B,IAA1B;MACD;;MACD,qFAAuB4B,IAAvB,EAA6B2D,QAA7B;IACD;;;WAzdD,wBAAsBC,WAAtB,EAAoD;MAClDtG,cAAc,CAACqC,YAAf,GAA8BiE,WAA9B;IACD;;;;EAvD2BjI,WAAW,MAAX,4BAAewB,UAAf,E;;AAAxBG,c,CACGlB,M,GAAiBA,M;AADpBkB,c,CAEGjB,M,GAAiBA,M;AAFpBiB,c,CAGGhB,gB,GAA2BA,gB;AAH9BgB,c,CAIGf,O,GAAkBA,O;AAJrBe,c,CAKGd,I,GAAeA,I;AALlBc,c,CAOGqC,Y,GAAgC,I;AA0gBzCkE,MAAM,CAACC,OAAP,GAAiBxG,cAAjB"},"metadata":{},"sourceType":"script"}