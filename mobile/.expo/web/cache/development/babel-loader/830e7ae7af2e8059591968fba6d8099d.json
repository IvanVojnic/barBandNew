{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport invariant from 'invariant';\nimport ReactNative from \"../../Renderer/shims/ReactNative\";\nimport Platform from \"../../Utilities/Platform\";\nimport TVEventHandler from \"../../Components/AppleTV/TVEventHandler\";\n\nvar TVTouchable = function () {\n  function TVTouchable(component, config) {\n    _classCallCheck(this, TVTouchable);\n\n    invariant(Platform.isTV, 'TVTouchable: Requires `Platform.isTV`.');\n    this._tvEventHandler = new TVEventHandler();\n\n    this._tvEventHandler.enable(component, function (_, tvData) {\n      tvData.dispatchConfig = {};\n\n      if (ReactNative.findNodeHandle(component) === tvData.tag) {\n        if (tvData.eventType === 'focus') {\n          config.onFocus(tvData);\n        } else if (tvData.eventType === 'blur') {\n          config.onBlur(tvData);\n        } else if (tvData.eventType === 'select') {\n          if (!config.getDisabled()) {\n            config.onPress(tvData);\n          }\n        }\n      }\n    });\n  }\n\n  _createClass(TVTouchable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      this._tvEventHandler.disable();\n    }\n  }]);\n\n  return TVTouchable;\n}();\n\nexport { TVTouchable as default };","map":{"version":3,"names":["invariant","ReactNative","Platform","TVEventHandler","TVTouchable","component","config","isTV","_tvEventHandler","enable","_","tvData","dispatchConfig","findNodeHandle","tag","eventType","onFocus","onBlur","getDisabled","onPress","disable"],"sources":["D:/проекты летом 2022/loginapp2/mobile/node_modules/react-native/Libraries/Components/Touchable/TVTouchable.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport invariant from 'invariant';\nimport ReactNative from '../../Renderer/shims/ReactNative';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport Platform from '../../Utilities/Platform';\nimport TVEventHandler from '../../Components/AppleTV/TVEventHandler';\n\ntype TVTouchableConfig = $ReadOnly<{|\n  getDisabled: () => boolean,\n  onBlur: (event: BlurEvent) => mixed,\n  onFocus: (event: FocusEvent) => mixed,\n  onPress: (event: PressEvent) => mixed,\n|}>;\n\nexport default class TVTouchable {\n  _tvEventHandler: TVEventHandler;\n\n  constructor(component: any, config: TVTouchableConfig) {\n    invariant(Platform.isTV, 'TVTouchable: Requires `Platform.isTV`.');\n    this._tvEventHandler = new TVEventHandler();\n    this._tvEventHandler.enable(component, (_, tvData) => {\n      tvData.dispatchConfig = {};\n      if (ReactNative.findNodeHandle(component) === tvData.tag) {\n        if (tvData.eventType === 'focus') {\n          config.onFocus(tvData);\n        } else if (tvData.eventType === 'blur') {\n          config.onBlur(tvData);\n        } else if (tvData.eventType === 'select') {\n          if (!config.getDisabled()) {\n            config.onPress(tvData);\n          }\n        }\n      }\n    });\n  }\n\n  destroy(): void {\n    this._tvEventHandler.disable();\n  }\n}\n"],"mappings":"AAUA;;;;AAEA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,WAAP;AAMA,OAAOC,QAAP;AACA,OAAOC,cAAP;;IASqBC,W;EAGnB,qBAAYC,SAAZ,EAA4BC,MAA5B,EAAuD;IAAA;;IACrDN,SAAS,CAACE,QAAQ,CAACK,IAAV,EAAgB,wCAAhB,CAAT;IACA,KAAKC,eAAL,GAAuB,IAAIL,cAAJ,EAAvB;;IACA,KAAKK,eAAL,CAAqBC,MAArB,CAA4BJ,SAA5B,EAAuC,UAACK,CAAD,EAAIC,MAAJ,EAAe;MACpDA,MAAM,CAACC,cAAP,GAAwB,EAAxB;;MACA,IAAIX,WAAW,CAACY,cAAZ,CAA2BR,SAA3B,MAA0CM,MAAM,CAACG,GAArD,EAA0D;QACxD,IAAIH,MAAM,CAACI,SAAP,KAAqB,OAAzB,EAAkC;UAChCT,MAAM,CAACU,OAAP,CAAeL,MAAf;QACD,CAFD,MAEO,IAAIA,MAAM,CAACI,SAAP,KAAqB,MAAzB,EAAiC;UACtCT,MAAM,CAACW,MAAP,CAAcN,MAAd;QACD,CAFM,MAEA,IAAIA,MAAM,CAACI,SAAP,KAAqB,QAAzB,EAAmC;UACxC,IAAI,CAACT,MAAM,CAACY,WAAP,EAAL,EAA2B;YACzBZ,MAAM,CAACa,OAAP,CAAeR,MAAf;UACD;QACF;MACF;IACF,CAbD;EAcD;;;;WAED,mBAAgB;MACd,KAAKH,eAAL,CAAqBY,OAArB;IACD;;;;;;SAxBkBhB,W"},"metadata":{},"sourceType":"module"}