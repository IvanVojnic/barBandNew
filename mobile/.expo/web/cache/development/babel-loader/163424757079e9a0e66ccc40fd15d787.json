{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B \\u043B\\u0435\\u0442\\u043E\\u043C 2022\\\\work2\\\\barband\\\\mobile\\\\assets\\\\checkBox.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\n\nvar Checkbox = function Checkbox(props) {\n  var _useState = useState(\"#fff\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectColor = _useState2[0],\n      setSelectColor = _useState2[1];\n\n  useEffect(function () {\n    var array = props.friendsArr;\n    alert(array);\n\n    if (array.indexOf(props.friendId) !== -1) {\n      setSelectColor(\"#00ff04\");\n    } else {\n      setSelectColor(\"#fff\");\n    }\n  }, [props.friendsArrLen]);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableHighlight, {\n    onPress: props.onPress,\n    style: styles.CheckboxContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: \"\" + selectColor,\n      height: 8,\n      width: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  })), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, props.title));\n};\n\nvar styles = StyleSheet.create({\n  CheckboxContainer: {\n    display: 'inlineFlex',\n    border: '3px solid green',\n    height: '15px',\n    width: '15px',\n    padding: 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default Checkbox;","map":{"version":3,"names":["React","useEffect","useState","Checkbox","props","selectColor","setSelectColor","array","friendsArr","alert","indexOf","friendId","friendsArrLen","onPress","styles","CheckboxContainer","backgroundColor","height","width","title","StyleSheet","create","display","border","padding","alignItems","justifyContent"],"sources":["D:/проекты летом 2022/work2/barband/mobile/assets/checkBox.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {\r\n    StyleSheet,\r\n    View, Pressable, Text, TouchableHighlight\r\n} from 'react-native';\r\n\r\nconst Checkbox = (props) => {\r\n    const [selectColor, setSelectColor] = useState(\"#fff\")\r\n    useEffect(() => {\r\n        let array = props.friendsArr\r\n        alert(array)\r\n        if(array.indexOf(props.friendId) !== -1){\r\n            setSelectColor(\"#00ff04\")\r\n        } else {\r\n            setSelectColor(\"#fff\")\r\n        }\r\n    }, [props.friendsArrLen])\r\n    \r\n    return (\r\n        <View>\r\n            <TouchableHighlight onPress={props.onPress} style={styles.CheckboxContainer}>\r\n                <View style={{backgroundColor: `${selectColor}`, height: 8, width: 8}}></View>\r\n            </TouchableHighlight>\r\n        <Text>{props.title}</Text>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create(\r\n    {\r\n        CheckboxContainer: {\r\n            display: 'inlineFlex',\r\n            border: '3px solid green',\r\n            height: '15px',\r\n            width: '15px',\r\n            padding: 2,\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n        },\r\n    });\r\n\r\n/*Checkbox.propTypes = {\r\n    keyValue: PropTypes.number.isRequired,\r\n    }/*size: PropTypes.number,\r\n    color: PropTypes.string,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    checked: PropTypes.bool,\r\n    labelColor: PropTypes.string,\r\n    checkedObjArr: PropTypes.object.isRequired\r\n}\r\nCheckbox.defaultProps = {\r\n    size: 32,\r\n    checked: false,\r\n    value: 'Default',\r\n    label: 'Default',\r\n    color: '#cecece',\r\n    labelColor: '000000',\r\n}*/\r\n\r\nexport default Checkbox\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;;;;;AAMA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;EACxB,gBAAsCF,QAAQ,CAAC,MAAD,CAA9C;EAAA;EAAA,IAAOG,WAAP;EAAA,IAAoBC,cAApB;;EACAL,SAAS,CAAC,YAAM;IACZ,IAAIM,KAAK,GAAGH,KAAK,CAACI,UAAlB;IACAC,KAAK,CAACF,KAAD,CAAL;;IACA,IAAGA,KAAK,CAACG,OAAN,CAAcN,KAAK,CAACO,QAApB,MAAkC,CAAC,CAAtC,EAAwC;MACpCL,cAAc,CAAC,SAAD,CAAd;IACH,CAFD,MAEO;MACHA,cAAc,CAAC,MAAD,CAAd;IACH;EACJ,CARQ,EAQN,CAACF,KAAK,CAACQ,aAAP,CARM,CAAT;EAUA,OACI,oBAAC,IAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,kBAAD;IAAoB,OAAO,EAAER,KAAK,CAACS,OAAnC;IAA4C,KAAK,EAAEC,MAAM,CAACC,iBAA1D;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACI,oBAAC,IAAD;IAAM,KAAK,EAAE;MAACC,eAAe,OAAKX,WAArB;MAAoCY,MAAM,EAAE,CAA5C;MAA+CC,KAAK,EAAE;IAAtD,CAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ,EAIA,oBAAC,IAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAOd,KAAK,CAACe,KAAb,CAJA,CADJ;AAQH,CApBD;;AAsBA,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CACX;EACIN,iBAAiB,EAAE;IACfO,OAAO,EAAE,YADM;IAEfC,MAAM,EAAE,iBAFO;IAGfN,MAAM,EAAE,MAHO;IAIfC,KAAK,EAAE,MAJQ;IAKfM,OAAO,EAAE,CALM;IAMfC,UAAU,EAAE,QANG;IAOfC,cAAc,EAAE;EAPD;AADvB,CADW,CAAf;AAgCA,eAAevB,QAAf"},"metadata":{},"sourceType":"module"}