{"ast":null,"code":"'use strict';\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _this2 = this,\n    _jsxFileName = \"D:\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B \\u043B\\u0435\\u0442\\u043E\\u043C 2022\\\\loginapp2\\\\mobile\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\Touchable\\\\Touchable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar BoundingDimensions = require(\"./BoundingDimensions\");\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nvar Position = require(\"./Position\");\n\nvar React = require('react');\n\nvar ReactNative = require(\"../../Renderer/shims/ReactNative\");\n\nvar StyleSheet = require(\"../../StyleSheet/StyleSheet\");\n\nvar TVEventHandler = require(\"../AppleTV/TVEventHandler\");\n\nvar UIManager = require(\"../../ReactNative/UIManager\");\n\nvar View = require(\"../View/View\");\n\nvar SoundManager = require(\"../Sound/SoundManager\");\n\nvar keyMirror = require('fbjs/lib/keyMirror');\n\nvar normalizeColor = require(\"../../StyleSheet/normalizeColor\");\n\nvar extractSingleTouch = function extractSingleTouch(nativeEvent) {\n  var touches = nativeEvent.touches;\n  var changedTouches = nativeEvent.changedTouches;\n  var hasTouches = touches && touches.length > 0;\n  var hasChangedTouches = changedTouches && changedTouches.length > 0;\n  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;\n};\n\nvar States = keyMirror({\n  NOT_RESPONDER: null,\n  RESPONDER_INACTIVE_PRESS_IN: null,\n  RESPONDER_INACTIVE_PRESS_OUT: null,\n  RESPONDER_ACTIVE_PRESS_IN: null,\n  RESPONDER_ACTIVE_PRESS_OUT: null,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: null,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: null,\n  ERROR: null\n});\nvar baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\n\nvar IsActive = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n});\n\nvar IsPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar IsLongPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\nvar Signals = keyMirror({\n  DELAY: null,\n  RESPONDER_GRANT: null,\n  RESPONDER_RELEASE: null,\n  RESPONDER_TERMINATED: null,\n  ENTER_PRESS_RECT: null,\n  LEAVE_PRESS_RECT: null,\n  LONG_PRESS_DETECTED: null\n});\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\nvar TouchableMixin = {\n  componentDidMount: function componentDidMount() {\n    if (!Platform.isTV) {\n      return;\n    }\n\n    this._tvEventHandler = new TVEventHandler();\n\n    this._tvEventHandler.enable(this, function (cmp, evt) {\n      var myTag = ReactNative.findNodeHandle(cmp);\n      evt.dispatchConfig = {};\n\n      if (myTag === evt.tag) {\n        if (evt.eventType === 'focus') {\n          cmp.touchableHandleFocus(evt);\n        } else if (evt.eventType === 'blur') {\n          cmp.touchableHandleBlur(evt);\n        } else if (evt.eventType === 'select' && Platform.OS !== 'android') {\n          cmp.touchableHandlePress && !cmp.props.disabled && cmp.touchableHandlePress(evt);\n        }\n      }\n    });\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this._tvEventHandler) {\n      this._tvEventHandler.disable();\n\n      delete this._tvEventHandler;\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this.pressInLocation = null;\n\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n\n    if (isTouchWithinActive) {\n      var prevState = this.state.touchable.touchState;\n\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n\n      var curState = this.state.touchable.touchState;\n\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  touchableHandleFocus: function touchableHandleFocus(e) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n  touchableHandleBlur: function touchableHandleBlur(e) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var responderID = this.state.touchable.responderID;\n\n    if (responderID == null) {\n      return;\n    }\n\n    if (typeof responderID === 'number') {\n      UIManager.measure(responderID, this._handleQueryLayout);\n    } else {\n      responderID.measure(this._handleQueryLayout);\n    }\n  },\n  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n\n    if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : 'host component' + '`');\n    }\n\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : '<<host component>>' + '`');\n    }\n\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {\n      pageX: pageX,\n      pageY: pageY,\n      locationX: locationX,\n      locationY: locationY\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n    var isActiveTransition = !IsActive[curState] && IsActive[nextState];\n\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          this._startHighlight(e);\n\n          this._endHighlight(e);\n        }\n\n        if (Platform.OS === 'android' && !this.props.touchSoundDisabled) {\n          SoundManager.playTouchSound();\n        }\n\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    var _this = this;\n\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(function () {\n          _this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  withoutDefaultFocusAndBlur: {}\n};\n\nvar touchableHandleFocus = TouchableMixin.touchableHandleFocus,\n    touchableHandleBlur = TouchableMixin.touchableHandleBlur,\n    TouchableMixinWithoutDefaultFocusAndBlur = _objectWithoutProperties(TouchableMixin, [\"touchableHandleFocus\", \"touchableHandleBlur\"]);\n\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  renderDebugView: function renderDebugView(_ref) {\n    var color = _ref.color,\n        hitSlop = _ref.hitSlop;\n\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n\n    if (!__DEV__) {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n\n    var debugHitSlopStyle = {};\n    hitSlop = hitSlop || {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n\n    for (var key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n\n    var normalizedColor = normalizeColor(color);\n\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n\n    var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return React.createElement(View, {\n      pointerEvents: \"none\",\n      style: [styles.debug, _objectSpread({\n        borderColor: hexColor.slice(0, -2) + '55',\n        backgroundColor: hexColor.slice(0, -2) + '0F'\n      }, debugHitSlopStyle)],\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 7\n      }\n    });\n  }\n};\nvar styles = StyleSheet.create({\n  debug: {\n    position: 'absolute',\n    borderWidth: 1,\n    borderStyle: 'dashed'\n  }\n});\nmodule.exports = Touchable;","map":{"version":3,"names":["BoundingDimensions","require","Platform","Position","React","ReactNative","StyleSheet","TVEventHandler","UIManager","View","SoundManager","keyMirror","normalizeColor","extractSingleTouch","nativeEvent","touches","changedTouches","hasTouches","length","hasChangedTouches","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","baseStatesConditions","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","isTV","_tvEventHandler","enable","cmp","evt","myTag","findNodeHandle","dispatchConfig","tag","eventType","touchableHandleFocus","touchableHandleBlur","OS","touchableHandlePress","props","disabled","componentWillUnmount","disable","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","touchable","touchState","undefined","responderID","touchableHandleResponderTerminationRequest","rejectResponderTermination","touchableHandleStartShouldSetResponder","touchableLongPressCancelsPress","touchableHandleResponderGrant","e","dispatchID","currentTarget","persist","state","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","pressInLocation","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","pageX","pageY","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","prevState","curState","onFocus","onBlur","_remeasureMetricsOnActivation","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","release","getPooled","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","isInitialTransition","isActiveTransition","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchSoundDisabled","playTouchSound","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableGetPressOutDelayMS","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","color","__DEV__","debugHitSlopStyle","key","normalizedColor","hexColor","toString","substr","styles","debug","borderColor","slice","backgroundColor","create","position","borderWidth","borderStyle","module","exports"],"sources":["D:/проекты летом 2022/loginapp2/mobile/node_modules/react-native/Libraries/Components/Touchable/Touchable.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst BoundingDimensions = require('./BoundingDimensions');\nconst Platform = require('../../Utilities/Platform');\nconst Position = require('./Position');\nconst React = require('react');\nconst ReactNative = require('../../Renderer/shims/ReactNative');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst TVEventHandler = require('../AppleTV/TVEventHandler');\nconst UIManager = require('../../ReactNative/UIManager');\nconst View = require('../View/View');\nconst SoundManager = require('../Sound/SoundManager');\n\nconst keyMirror = require('fbjs/lib/keyMirror');\nconst normalizeColor = require('../../StyleSheet/normalizeColor');\n\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nconst extractSingleTouch = nativeEvent => {\n  const touches = nativeEvent.touches;\n  const changedTouches = nativeEvent.changedTouches;\n  const hasTouches = touches && touches.length > 0;\n  const hasChangedTouches = changedTouches && changedTouches.length > 0;\n\n  return !hasTouches && hasChangedTouches\n    ? changedTouches[0]\n    : hasTouches\n    ? touches[0]\n    : nativeEvent;\n};\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\nconst States = keyMirror({\n  NOT_RESPONDER: null, // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: null, // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: null, // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: null, // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: null, // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: null, // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: null, // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: null,\n});\n\ntype State =\n  | typeof States.NOT_RESPONDER\n  | typeof States.RESPONDER_INACTIVE_PRESS_IN\n  | typeof States.RESPONDER_INACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_OUT\n  | typeof States.ERROR;\n\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\n\nconst baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false,\n};\n\nconst IsActive = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\nconst IsLongPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = keyMirror({\n  DELAY: null,\n  RESPONDER_GRANT: null,\n  RESPONDER_RELEASE: null,\n  RESPONDER_TERMINATED: null,\n  ENTER_PRESS_RECT: null,\n  LEAVE_PRESS_RECT: null,\n  LONG_PRESS_DETECTED: null,\n});\n\ntype Signal =\n  | typeof Signals.DELAY\n  | typeof Signals.RESPONDER_GRANT\n  | typeof Signals.RESPONDER_RELEASE\n  | typeof Signals.RESPONDER_TERMINATED\n  | typeof Signals.ENTER_PRESS_RECT\n  | typeof Signals.LEAVE_PRESS_RECT\n  | typeof Signals.LONG_PRESS_DETECTED;\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER,\n  },\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  componentDidMount: function() {\n    if (!Platform.isTV) {\n      return;\n    }\n\n    this._tvEventHandler = new TVEventHandler();\n    this._tvEventHandler.enable(this, function(cmp, evt) {\n      const myTag = ReactNative.findNodeHandle(cmp);\n      evt.dispatchConfig = {};\n      if (myTag === evt.tag) {\n        if (evt.eventType === 'focus') {\n          cmp.touchableHandleFocus(evt);\n        } else if (evt.eventType === 'blur') {\n          cmp.touchableHandleBlur(evt);\n        } else if (evt.eventType === 'select' && Platform.OS !== 'android') {\n          cmp.touchableHandlePress &&\n            !cmp.props.disabled &&\n            cmp.touchableHandlePress(evt);\n        }\n      }\n    });\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function() {\n    if (this._tvEventHandler) {\n      this._tvEventHandler.disable();\n      delete this._tvEventHandler;\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function(): $TEMPORARY$object<{|\n    touchable: $TEMPORARY$object<{|responderID: null, touchState: void|}>,\n  |}> {\n    return {\n      touchable: {touchState: undefined, responderID: null},\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function(): any {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function(): any {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function(): boolean {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function(e: PressEvent) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined\n        ? Math.max(this.touchableGetHighlightDelayMS(), 0)\n        : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(\n        this._handleDelay.bind(this, e),\n        delayMS,\n      );\n    } else {\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined\n        ? Math.max(this.touchableGetLongPressDelayMS(), 10)\n        : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS,\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function(e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function(e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function(e: PressEvent) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset\n      ? this.touchableGetPressRectOffset()\n      : {\n          left: PRESS_EXPAND_PX,\n          right: PRESS_EXPAND_PX,\n          top: PRESS_EXPAND_PX,\n          bottom: PRESS_EXPAND_PX,\n        };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop\n      ? this.touchableGetHitSlop()\n      : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(\n        pageX,\n        pageY,\n        this.pressInLocation.pageX,\n        this.pressInLocation.pageY,\n      );\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n      pageX > positionOnActivate.left - pressExpandLeft &&\n      pageY > positionOnActivate.top - pressExpandTop &&\n      pageX <\n        positionOnActivate.left +\n          dimensionsOnActivate.width +\n          pressExpandRight &&\n      pageY <\n        positionOnActivate.top +\n          dimensionsOnActivate.height +\n          pressExpandBottom;\n    if (isTouchWithinActive) {\n      const prevState = this.state.touchable.touchState;\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (\n        curState === States.RESPONDER_INACTIVE_PRESS_IN &&\n        prevState !== States.RESPONDER_INACTIVE_PRESS_IN\n      ) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleFocus: function(e: Event) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleBlur: function(e: Event) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function() {\n    const responderID = this.state.touchable.responderID;\n    if (responderID == null) {\n      return;\n    }\n\n    if (typeof responderID === 'number') {\n      UIManager.measure(responderID, this._handleQueryLayout);\n    } else {\n      responderID.measure(this._handleQueryLayout);\n    }\n  },\n\n  _handleQueryLayout: function(\n    l: number,\n    t: number,\n    w: number,\n    h: number,\n    globalX: number,\n    globalY: number,\n  ) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(\n      globalX,\n      globalY,\n    );\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(\n      w,\n      h,\n    );\n  },\n\n  _handleDelay: function(e: PressEvent) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  _handleLongDelay: function(e: PressEvent) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (\n      curState === States.RESPONDER_ACTIVE_PRESS_IN ||\n      curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    ) {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function(signal: Signal, e: PressEvent) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' +\n          signal +\n          '` or state `' +\n          curState +\n          '` for Touchable responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : 'host component' + '`',\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' +\n          curState +\n          '` to `' +\n          signal +\n          '` for responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : '<<host component>>' + '`',\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function(state: State): boolean {\n    return (\n      state === States.RESPONDER_ACTIVE_PRESS_IN ||\n      state === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    );\n  },\n\n  _savePressInLocation: function(e: PressEvent) {\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    const locationX = touch && touch.locationX;\n    const locationY = touch && touch.locationY;\n    this.pressInLocation = {pageX, pageY, locationX, locationY};\n  },\n\n  _getDistanceBetweenPoints: function(\n    aX: number,\n    aY: number,\n    bX: number,\n    bY: number,\n  ): number {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function(\n    curState: State,\n    nextState: State,\n    signal: Signal,\n    e: PressEvent,\n  ) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED ||\n      signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      curState === States.NOT_RESPONDER &&\n      nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n\n    const isActiveTransition = !IsActive[curState] && IsActive[nextState];\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler\n        (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      const shouldInvokePress =\n        !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        if (Platform.OS === 'android' && !this.props.touchSoundDisabled) {\n          SoundManager.playTouchSound();\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  _startHighlight: function(e: PressEvent) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  _endHighlight: function(e: PressEvent) {\n    if (this.touchableHandleActivePressOut) {\n      if (\n        this.touchableGetPressOutDelayMS &&\n        this.touchableGetPressOutDelayMS()\n      ) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n  withoutDefaultFocusAndBlur: ({}: $TEMPORARY$object<{||}>),\n};\n\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\nconst {\n  touchableHandleFocus,\n  touchableHandleBlur,\n  ...TouchableMixinWithoutDefaultFocusAndBlur\n} = TouchableMixin;\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({\n    color,\n    hitSlop,\n  }: {\n    color: string | number,\n    hitSlop: EdgeInsetsProp,\n    ...\n  }): null | React.Node => {\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n    if (!__DEV__) {\n      throw Error(\n        'Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!',\n      );\n    }\n    const debugHitSlopStyle = {};\n    hitSlop = hitSlop || {top: 0, bottom: 0, left: 0, right: 0};\n    for (const key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n    const normalizedColor = normalizeColor(color);\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n    const hexColor =\n      '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={[\n          styles.debug,\n          /* $FlowFixMe(>=0.111.0 site=react_native_fb) This comment suppresses\n           * an error found when Flow v0.111 was deployed. To see the error,\n           * delete this comment and run Flow. */\n          {\n            borderColor: hexColor.slice(0, -2) + '55', // More opaque\n            backgroundColor: hexColor.slice(0, -2) + '0F', // Less opaque\n            ...debugHitSlopStyle,\n          },\n        ]}\n      />\n    );\n  },\n};\n\nconst styles = StyleSheet.create({\n  debug: {\n    position: 'absolute',\n    borderWidth: 1,\n    borderStyle: 'dashed',\n  },\n});\n\nmodule.exports = Touchable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}