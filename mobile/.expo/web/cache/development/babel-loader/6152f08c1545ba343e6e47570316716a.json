{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B \\u043B\\u0435\\u0442\\u043E\\u043C 2022\\\\loginapp2\\\\mobile\\\\node_modules\\\\react-native\\\\Libraries\\\\Components\\\\RefreshControl\\\\RefreshControl.js\";\nvar _excluded = [\"enabled\", \"colors\", \"progressBackgroundColor\", \"size\", \"progressViewOffset\"],\n    _excluded2 = [\"tintColor\", \"titleColor\", \"title\"];\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nvar React = require('react');\n\nimport AndroidSwipeRefreshLayoutNativeComponent, { Commands as AndroidSwipeRefreshLayoutCommands } from \"./AndroidSwipeRefreshLayoutNativeComponent\";\nimport PullToRefreshViewNativeComponent, { Commands as PullToRefreshCommands } from \"./PullToRefreshViewNativeComponent\";\nvar RefreshLayoutConsts;\n\nif (Platform.OS === 'android') {\n  var AndroidSwipeRefreshLayout = require(\"../../ReactNative/UIManager\").getViewManagerConfig('AndroidSwipeRefreshLayout');\n\n  RefreshLayoutConsts = AndroidSwipeRefreshLayout ? AndroidSwipeRefreshLayout.Constants : {\n    SIZE: {}\n  };\n} else {\n  RefreshLayoutConsts = {\n    SIZE: {}\n  };\n}\n\nvar RefreshControl = function (_React$Component) {\n  _inherits(RefreshControl, _React$Component);\n\n  var _super = _createSuper(RefreshControl);\n\n  function RefreshControl() {\n    var _this;\n\n    _classCallCheck(this, RefreshControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._lastNativeRefreshing = false;\n\n    _this._onRefresh = function () {\n      _this._lastNativeRefreshing = true;\n      _this.props.onRefresh && _this.props.onRefresh();\n\n      _this.forceUpdate();\n    };\n\n    _this._setNativeRef = function (ref) {\n      _this._nativeRef = ref;\n    };\n\n    return _this;\n  }\n\n  _createClass(RefreshControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.refreshing !== prevProps.refreshing) {\n        this._lastNativeRefreshing = this.props.refreshing;\n      } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {\n        if (Platform.OS === 'android') {\n          AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        } else {\n          PullToRefreshCommands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        }\n\n        this._lastNativeRefreshing = this.props.refreshing;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'ios') {\n        var _this$props = this.props,\n            enabled = _this$props.enabled,\n            colors = _this$props.colors,\n            progressBackgroundColor = _this$props.progressBackgroundColor,\n            size = _this$props.size,\n            progressViewOffset = _this$props.progressViewOffset,\n            props = _objectWithoutProperties(_this$props, _excluded);\n\n        return React.createElement(PullToRefreshViewNativeComponent, _extends({}, props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        var _this$props2 = this.props,\n            tintColor = _this$props2.tintColor,\n            titleColor = _this$props2.titleColor,\n            title = _this$props2.title,\n            _props = _objectWithoutProperties(_this$props2, _excluded2);\n\n        return React.createElement(AndroidSwipeRefreshLayoutNativeComponent, _extends({}, _props, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 9\n          }\n        }));\n      }\n    }\n  }]);\n\n  return RefreshControl;\n}(React.Component);\n\nRefreshControl.SIZE = RefreshLayoutConsts.SIZE;\nmodule.exports = RefreshControl;","map":{"version":3,"names":["Platform","require","React","AndroidSwipeRefreshLayoutNativeComponent","Commands","AndroidSwipeRefreshLayoutCommands","PullToRefreshViewNativeComponent","PullToRefreshCommands","RefreshLayoutConsts","OS","AndroidSwipeRefreshLayout","getViewManagerConfig","Constants","SIZE","RefreshControl","_lastNativeRefreshing","_onRefresh","props","onRefresh","forceUpdate","_setNativeRef","ref","_nativeRef","refreshing","prevProps","setNativeRefreshing","enabled","colors","progressBackgroundColor","size","progressViewOffset","tintColor","titleColor","title","Component","module","exports"],"sources":["D:/проекты летом 2022/loginapp2/mobile/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport AndroidSwipeRefreshLayoutNativeComponent, {\n  Commands as AndroidSwipeRefreshLayoutCommands,\n} from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, {\n  Commands as PullToRefreshCommands,\n} from './PullToRefreshViewNativeComponent';\n\nlet RefreshLayoutConsts: any;\nif (Platform.OS === 'android') {\n  const AndroidSwipeRefreshLayout = require('../../ReactNative/UIManager').getViewManagerConfig(\n    'AndroidSwipeRefreshLayout',\n  );\n  RefreshLayoutConsts = AndroidSwipeRefreshLayout\n    ? AndroidSwipeRefreshLayout.Constants\n    : {SIZE: {}};\n} else {\n  RefreshLayoutConsts = {SIZE: {}};\n}\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator, see RefreshControl.SIZE.\n   */\n  size?: ?(\n    | typeof RefreshLayoutConsts.SIZE.DEFAULT\n    | typeof RefreshLayoutConsts.SIZE.LARGE\n  ),\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void | Promise<void>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  static SIZE: any = RefreshLayoutConsts.SIZE;\n\n  _nativeRef: ?React.ElementRef<\n    | typeof PullToRefreshViewNativeComponent\n    | typeof AndroidSwipeRefreshLayoutNativeComponent,\n  >;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._nativeRef\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      const {\n        enabled,\n        colors,\n        progressBackgroundColor,\n        size,\n        progressViewOffset,\n        ...props\n      } = this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n\n  _setNativeRef = (\n    ref: ?React.ElementRef<\n      | typeof PullToRefreshViewNativeComponent\n      | typeof AndroidSwipeRefreshLayoutNativeComponent,\n    >,\n  ) => {\n    this._nativeRef = ref;\n  };\n}\n\nmodule.exports = RefreshControl;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}