{"ast":null,"code":"'use strict';\n\nimport Platform from \"../Utilities/Platform\";\nimport RCTLog from \"../Utilities/RCTLog\";\nimport * as LogBoxData from \"./Data/LogBoxData\";\nimport { parseLogBoxLog, parseInterpolation } from \"./Data/parseLogBoxLog\";\nvar LogBox;\n\nif (__DEV__) {\n  var _console = console,\n      error = _console.error,\n      warn = _console.warn;\n  var errorImpl = error.bind(console);\n  var warnImpl = warn.bind(console);\n\n  console.error = function () {\n    errorImpl.apply(void 0, arguments);\n  };\n\n  console.warn = function () {\n    warnImpl.apply(void 0, arguments);\n  };\n\n  LogBox = {\n    ignoreLogs: function ignoreLogs(patterns) {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n    ignoreAllLogs: function ignoreAllLogs(value) {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n    uninstall: function uninstall() {\n      errorImpl = error;\n      warnImpl = warn;\n      delete console.disableLogBox;\n    },\n    install: function install() {\n      require(\"../NativeModules/specs/NativeLogBox\");\n\n      errorImpl = function errorImpl() {\n        registerError.apply(void 0, arguments);\n      };\n\n      warnImpl = function warnImpl() {\n        registerWarning.apply(void 0, arguments);\n      };\n\n      if (console.disableYellowBox === true) {\n        LogBoxData.setDisabled(true);\n        console.warn('console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.');\n      }\n\n      Object.defineProperty(console, 'disableYellowBox', {\n        configurable: true,\n        get: function get() {\n          return LogBoxData.isDisabled();\n        },\n        set: function set(value) {\n          LogBoxData.setDisabled(value);\n          console.warn('console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.');\n        }\n      });\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler(function () {\n        registerWarning.apply(void 0, arguments);\n      });\n    }\n  };\n\n  var isRCTLogAdviceWarning = function isRCTLogAdviceWarning() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  var isWarningModuleWarning = function isWarningModuleWarning() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  var registerWarning = function registerWarning() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      error.call.apply(error, [console].concat(args));\n      return;\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning.apply(void 0, args)) {\n        var _parseLogBoxLog = parseLogBoxLog(args),\n            category = _parseLogBoxLog.category,\n            message = _parseLogBoxLog.message,\n            componentStack = _parseLogBoxLog.componentStack;\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          warn.call.apply(warn, [console].concat(args));\n          LogBoxData.addLog({\n            level: 'warn',\n            category: category,\n            message: message,\n            componentStack: componentStack\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  var registerError = function registerError() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      error.call.apply(error, [console].concat(args));\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning.apply(void 0, args)) {\n        error.call.apply(error, [console].concat(args));\n        return;\n      }\n\n      var format = args[0].replace('Warning: ', '');\n      var filterResult = LogBoxData.checkWarningFilter(format);\n\n      if (filterResult.suppressCompletely) {\n        return;\n      }\n\n      var level = 'error';\n\n      if (filterResult.suppressDialog_LEGACY === true) {\n        level = 'warn';\n      } else if (filterResult.forceDialogImmediately === true) {\n        level = 'fatal';\n      }\n\n      args[0] = \"Warning: \" + filterResult.finalFormat;\n\n      var _parseLogBoxLog2 = parseLogBoxLog(args),\n          category = _parseLogBoxLog2.category,\n          message = _parseLogBoxLog2.message,\n          componentStack = _parseLogBoxLog2.componentStack;\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        var interpolated = parseInterpolation(args);\n        error.call(console, interpolated.message.content);\n        LogBoxData.addLog({\n          level: level,\n          category: category,\n          message: message,\n          componentStack: componentStack\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    ignoreLogs: function ignoreLogs(patterns) {},\n    ignoreAllLogs: function ignoreAllLogs(value) {},\n    install: function install() {},\n    uninstall: function uninstall() {}\n  };\n}\n\nmodule.exports = LogBox;","map":{"version":3,"names":["Platform","RCTLog","LogBoxData","parseLogBoxLog","parseInterpolation","LogBox","__DEV__","console","error","warn","errorImpl","bind","warnImpl","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","setDisabled","uninstall","disableLogBox","install","require","registerError","registerWarning","disableYellowBox","Object","defineProperty","configurable","get","isDisabled","set","isTesting","setWarningHandler","isRCTLogAdviceWarning","args","startsWith","isWarningModuleWarning","isLogBoxErrorMessage","String","call","category","message","componentStack","isMessageIgnored","content","addLog","level","err","reportLogBoxError","format","replace","filterResult","checkWarningFilter","suppressCompletely","suppressDialog_LEGACY","forceDialogImmediately","finalFormat","interpolated","module","exports"],"sources":["D:/проекты летом 2022/loginapp2/mobile/node_modules/react-native/Libraries/LogBox/LogBox.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport Platform from '../Utilities/Platform';\nimport RCTLog from '../Utilities/RCTLog';\nimport * as LogBoxData from './Data/LogBoxData';\nimport {parseLogBoxLog, parseInterpolation} from './Data/parseLogBoxLog';\n\nimport type {IgnorePattern} from './Data/LogBoxData';\n\nlet LogBox;\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  // LogBox needs to insert itself early,\n  // in order to access the component stacks appended by React DevTools.\n  const {error, warn} = console;\n  let errorImpl = error.bind(console);\n  let warnImpl = warn.bind(console);\n\n  (console: any).error = function(...args) {\n    errorImpl(...args);\n  };\n  (console: any).warn = function(...args) {\n    warnImpl(...args);\n  };\n\n  LogBox = {\n    ignoreLogs: (patterns: $ReadOnlyArray<IgnorePattern>): void => {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs: (value?: ?boolean): void => {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    uninstall: (): void => {\n      errorImpl = error;\n      warnImpl = warn;\n      delete (console: any).disableLogBox;\n    },\n\n    install: (): void => {\n      // Trigger lazy initialization of module.\n      require('../NativeModules/specs/NativeLogBox');\n\n      errorImpl = function(...args) {\n        registerError(...args);\n      };\n\n      warnImpl = function(...args) {\n        registerWarning(...args);\n      };\n\n      if ((console: any).disableYellowBox === true) {\n        LogBoxData.setDisabled(true);\n        console.warn(\n          'console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.',\n        );\n      }\n\n      (Object.defineProperty: any)(console, 'disableYellowBox', {\n        configurable: true,\n        get: () => LogBoxData.isDisabled(),\n        set: value => {\n          LogBoxData.setDisabled(value);\n          console.warn(\n            'console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.',\n          );\n        },\n      });\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler((...args) => {\n        registerWarning(...args);\n      });\n    },\n  };\n\n  const isRCTLogAdviceWarning = (...args) => {\n    // RCTLogAdvice is a native logging function designed to show users\n    // a message in the console, but not show it to them in Logbox.\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  const isWarningModuleWarning = (...args) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerWarning = (...args): void => {\n    // Let warnings within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      error.call(console, ...args);\n      return;\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning(...args)) {\n        const {category, message, componentStack} = parseLogBoxLog(args);\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          // Be sure to pass LogBox warnings through.\n          warn.call(console, ...args);\n\n          LogBoxData.addLog({\n            level: 'warn',\n            category,\n            message,\n            componentStack,\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  const registerError = (...args): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      error.call(console, ...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        error.call(console, ...args);\n        return;\n      }\n\n      const format = args[0].replace('Warning: ', '');\n      const filterResult = LogBoxData.checkWarningFilter(format);\n      if (filterResult.suppressCompletely) {\n        return;\n      }\n\n      let level = 'error';\n      if (filterResult.suppressDialog_LEGACY === true) {\n        level = 'warn';\n      } else if (filterResult.forceDialogImmediately === true) {\n        level = 'fatal'; // Do not downgrade. These are real bugs with same severity as throws.\n      }\n\n      // Unfortunately, we need to add the Warning: prefix back for downstream dependencies.\n      args[0] = `Warning: ${filterResult.finalFormat}`;\n      const {category, message, componentStack} = parseLogBoxLog(args);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        // Interpolate the message so they are formatted for adb and other CLIs.\n        // This is different than the message.content above because it includes component stacks.\n        const interpolated = parseInterpolation(args);\n        error.call(console, interpolated.message.content);\n\n        LogBoxData.addLog({\n          level,\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    ignoreLogs: (patterns: $ReadOnlyArray<IgnorePattern>): void => {\n      // Do nothing.\n    },\n\n    ignoreAllLogs: (value?: ?boolean): void => {\n      // Do nothing.\n    },\n\n    install: (): void => {\n      // Do nothing.\n    },\n\n    uninstall: (): void => {\n      // Do nothing.\n    },\n  };\n}\n\nmodule.exports = (LogBox: {\n  ignoreLogs($ReadOnlyArray<IgnorePattern>): void,\n  ignoreAllLogs(?boolean): void,\n  install(): void,\n  uninstall(): void,\n  ...\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}