{"ast":null,"code":"import _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"D:\\\\\\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B \\u043B\\u0435\\u0442\\u043E\\u043C 2022\\\\work2\\\\barband\\\\mobile\\\\assets\\\\checkBox.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from 'prop-types';\n\nvar SelectedCheckboxes = function () {\n  function SelectedCheckboxes() {\n    _classCallCheck(this, SelectedCheckboxes);\n\n    this.selectedCheckboxes = [];\n  }\n\n  _createClass(SelectedCheckboxes, [{\n    key: \"addItem\",\n    value: function addItem(option) {\n      selectedCheckboxes.push(option);\n    }\n  }, {\n    key: \"fetchArray\",\n    value: function fetchArray() {\n      return selectedCheckboxes;\n    }\n  }]);\n\n  return SelectedCheckboxes;\n}();\n\nvar Checkbox = function (_Component) {\n  _inherits(Checkbox, _Component);\n\n  var _super = _createSuper(Checkbox);\n\n  function Checkbox() {\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    _this = _super.call(this);\n    _this.state = {\n      checked: null\n    };\n    return _this;\n  }\n\n  _createClass(Checkbox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.checked) {\n        this.setState({\n          checked: true\n        }, function () {\n          _this2.props.checkedObjArr.addItem({\n            'key': _this2.props.keyValue,\n            'value': _this2.props.value,\n            'label': _this2.props.label\n          });\n        });\n      } else {\n        this.setState({\n          checked: false\n        });\n      }\n    }\n  }, {\n    key: \"stateSwitcher\",\n    value: function stateSwitcher(key, label, value) {\n      var _this3 = this;\n\n      this.setState({\n        checked: !this.state.checked\n      }, function () {\n        if (_this3.state.checked) {\n          _this3.props.checkedObjArr.addItem({\n            'key': key,\n            'value': value,\n            'label': label\n          });\n        } else {\n          _this3.props.checkedObjArr.fetchArray().splice(_this3.props.checkedObjArr.fetchArray().findIndex(function (y) {\n            return y.key == key;\n          }), 1);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(TouchableHighlight, {\n        onPress: this.stateSwitcher.bind(this, this.props.keyValue, this.props.label, this.props.value),\n        underlayColor: \"transparent\",\n        style: {\n          marginVertical: 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          padding: 4,\n          width: this.props.size,\n          height: this.props.size,\n          backgroundColor: this.props.color\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, this.state.checked ? React.createElement(View, {\n        style: styles.selectedUI,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 34\n        }\n      }, React.createElement(Image, {\n        source: require(\"./assets/tick.png\"),\n        style: styles.checkboxTickImg,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 37\n        }\n      })) : React.createElement(View, {\n        style: styles.uncheckedCheckbox,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 34\n        }\n      })), React.createElement(Text, {\n        style: [styles.checkboxLabel, {\n          color: this.props.labelColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, this.props.label)));\n    }\n  }]);\n\n  return Checkbox;\n}(Component);\n\nexport { Checkbox as default };\nCheckbox.propTypes = {\n  keyValue: PropTypes.number.isRequired,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  checked: PropTypes.bool,\n  labelColor: PropTypes.string,\n  checkedObjArr: PropTypes.object.isRequired\n};\nCheckbox.defaultProps = {\n  size: 32,\n  checked: false,\n  value: 'Default',\n  label: 'Default',\n  color: '#cecece',\n  labelColor: '000000'\n};\nvar styles = StyleSheet.create({\n  CheckboxContainer: {\n    flex: 1,\n    padding: 22,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: Platform.OS === 'ios' ? 25 : 0\n  },\n  showSelectedButton: {\n    padding: 20,\n    marginTop: 25,\n    alignSelf: 'stretch',\n    backgroundColor: '#5D52FF'\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#ffffff',\n    textAlign: 'center',\n    alignSelf: 'stretch'\n  },\n  selectedUI: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  checkboxTickImg: {\n    width: '85%',\n    height: '85%',\n    tintColor: '#ffffff',\n    resizeMode: 'contain'\n  },\n  uncheckedCheckbox: {\n    flex: 1,\n    backgroundColor: '#ffffff'\n  },\n  checkboxLabel: {\n    fontSize: 18,\n    paddingLeft: 15\n  }\n});","map":{"version":3,"names":["React","Component","PropTypes","SelectedCheckboxes","selectedCheckboxes","option","push","Checkbox","state","checked","props","setState","checkedObjArr","addItem","keyValue","value","label","key","fetchArray","splice","findIndex","y","stateSwitcher","bind","marginVertical","flexDirection","alignItems","padding","width","size","height","backgroundColor","color","styles","selectedUI","require","checkboxTickImg","uncheckedCheckbox","checkboxLabel","labelColor","propTypes","number","isRequired","string","bool","object","defaultProps","StyleSheet","create","CheckboxContainer","flex","justifyContent","paddingTop","Platform","OS","showSelectedButton","marginTop","alignSelf","buttonText","fontSize","textAlign","tintColor","resizeMode","paddingLeft"],"sources":["D:/проекты летом 2022/work2/barband/mobile/assets/checkBox.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Alert,\r\n    Image,\r\n    Platform,\r\n    StyleSheet,\r\n    Text,\r\n    TouchableHighlight,\r\n    View\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass SelectedCheckboxes {\r\n    selectedCheckboxes;\r\n    constructor() {\r\n        this.selectedCheckboxes = [];\r\n    }\r\n    addItem(option) {\r\n        selectedCheckboxes.push(option);\r\n    }\r\n    fetchArray() {\r\n        return selectedCheckboxes;\r\n    }\r\n}\r\nexport default class Checkbox extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            checked: null\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.checked) {\r\n            this.setState({ checked: true }, () => {\r\n                this.props.checkedObjArr.addItem({\r\n                    'key': this.props.keyValue,\r\n                    'value': this.props.value,\r\n                    'label': this.props.label\r\n                });\r\n            });\r\n        } else {\r\n            this.setState({\r\n                checked: false\r\n            });\r\n        }\r\n    }\r\n\r\n    stateSwitcher(key, label, value) {\r\n        this.setState({ checked: !this.state.checked }, () => {\r\n            if (this.state.checked) {\r\n                this.props.checkedObjArr.addItem({\r\n                    'key': key,\r\n                    'value': value,\r\n                    'label': label\r\n                });\r\n            } else {\r\n                this.props.checkedObjArr.fetchArray().splice(\r\n                    this.props.checkedObjArr.fetchArray().findIndex(y => y.key == key), 1\r\n                );\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <TouchableHighlight\r\n                onPress={this.stateSwitcher.bind(this, this.props.keyValue, this.props.label, this.props.value)}\r\n                underlayColor=\"transparent\"\r\n                style={{ marginVertical: 20 }}>\r\n                <View style={{\r\n                    flexDirection: 'row',\r\n                    alignItems: 'center' }}>\r\n                    <View style={{\r\n                        padding: 4,\r\n                        width: this.props.size,\r\n                        height: this.props.size,\r\n                        backgroundColor: this.props.color\r\n                    }}>\r\n                        {\r\n                            (this.state.checked)\r\n                                ?\r\n                                (<View style={styles.selectedUI}>\r\n                                    <Image source={require('./assets/tick.png')} style={styles.checkboxTickImg} />\r\n                                </View>)\r\n                                :\r\n                                (<View style={styles.uncheckedCheckbox} />)\r\n                        }\r\n                    </View>\r\n                    <Text style={[styles.checkboxLabel, { color: this.props.labelColor }]}>\r\n                        {this.props.label}\r\n                    </Text>\r\n                </View>\r\n            </TouchableHighlight>\r\n        );\r\n    }\r\n}\r\n/*export default class App extends Component {\r\n    CheckedArrObject;\r\n\r\n    constructor() {\r\n        super();\r\n        this.CheckedArrObject = new SelectedCheckboxes();\r\n        this.state = { pickedElements: '' }\r\n    }\r\n\r\n    renderSelectedElements = () => {\r\n        if (CheckedArrObject.fetchArray().length === 0) {\r\n            Alert.alert('No Item Selected');\r\n        } else {\r\n            this.setState(() => {\r\n                return {\r\n                    pickedElements: this.CheckedArrObject.fetchArray().map(res => res.value).join()\r\n                }\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <View style={styles.CheckboxContainer}>\r\n                <Checkbox size={45}\r\n                          keyValue={1}\r\n                          checked={false}\r\n                          color=\"#E81E63\"\r\n                          labelColor=\"#000000\"\r\n                          label=\"Birds of Prey\"\r\n                          value=\"birds_of_prey\"\r\n                          checkedObjArr={this.CheckedArrObject} />\r\n\r\n                <TouchableHighlight style={styles.showSelectedButton} onPress={this.renderSelectedElements}>\r\n                    <Text style={styles.buttonText}>Checked Items</Text>\r\n                </TouchableHighlight>\r\n                <Text style={{ fontSize: 22, color: \"#000\", marginTop: 25 }}> {this.state.pickedElements} </Text>\r\n            </View>\r\n        );\r\n    }\r\n}*/\r\n\r\nCheckbox.propTypes = {\r\n    keyValue: PropTypes.number.isRequired,\r\n    size: PropTypes.number,\r\n    color: PropTypes.string,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    checked: PropTypes.bool,\r\n    labelColor: PropTypes.string,\r\n    checkedObjArr: PropTypes.object.isRequired\r\n}\r\nCheckbox.defaultProps = {\r\n    size: 32,\r\n    checked: false,\r\n    value: 'Default',\r\n    label: 'Default',\r\n    color: '#cecece',\r\n    labelColor: '000000',\r\n}\r\nconst styles = StyleSheet.create(\r\n    {\r\n        CheckboxContainer: {\r\n            flex: 1,\r\n            padding: 22,\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            paddingTop: (Platform.OS === 'ios') ? 25 : 0\r\n        },\r\n        showSelectedButton: {\r\n            padding: 20,\r\n            marginTop: 25,\r\n            alignSelf: 'stretch',\r\n            backgroundColor: '#5D52FF'\r\n        },\r\n        buttonText: {\r\n            fontSize: 20,\r\n            color: '#ffffff',\r\n            textAlign: 'center',\r\n            alignSelf: 'stretch'\r\n        },\r\n        selectedUI: {\r\n            flex: 1,\r\n            justifyContent: 'center',\r\n            alignItems: 'center'\r\n        },\r\n        checkboxTickImg: {\r\n            width: '85%',\r\n            height: '85%',\r\n            tintColor: '#ffffff',\r\n            resizeMode: 'contain'\r\n        },\r\n        uncheckedCheckbox: {\r\n            flex: 1,\r\n            backgroundColor: '#ffffff'\r\n        },\r\n        checkboxLabel: {\r\n            fontSize: 18,\r\n            paddingLeft: 15\r\n        }\r\n    });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}