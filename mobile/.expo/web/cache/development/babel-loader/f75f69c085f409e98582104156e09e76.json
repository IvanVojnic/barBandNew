{"ast":null,"code":"'use strict';\n\nvar Systrace = require(\"../Performance/Systrace\");\n\nvar infoLog = require(\"./infoLog\");\n\nvar performanceNow = global.nativeQPLTimestamp || global.nativePerformanceNow || require('fbjs/lib/performanceNow');\n\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\n\nfunction createPerformanceLogger() {\n  var result = {\n    _timespans: {},\n    _extras: {},\n    _points: {},\n    addTimespan: function addTimespan(key, lengthInMs, description) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        totalTime: lengthInMs\n      };\n    },\n    startTimespan: function startTimespan(key, description) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        startTime: performanceNow()\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n    },\n    stopTimespan: function stopTimespan(key, options) {\n      var timespan = this._timespans[key];\n\n      if (!timespan || !timespan.startTime) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n\n        return;\n      }\n\n      if (timespan.endTime && !(options != null && options.update)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n\n        return;\n      }\n\n      timespan.endTime = performanceNow();\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n    },\n    clear: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    },\n    clearCompleted: function clearCompleted() {\n      for (var _key in this._timespans) {\n        if (this._timespans[_key].totalTime) {\n          delete this._timespans[_key];\n        }\n      }\n\n      this._extras = {};\n      this._points = {};\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    },\n    clearExceptTimespans: function clearExceptTimespans(keys) {\n      this._timespans = Object.keys(this._timespans).reduce(function (previous, key) {\n        if (keys.indexOf(key) !== -1) {\n          previous[key] = this._timespans[key];\n        }\n\n        return previous;\n      }, {});\n      this._extras = {};\n      this._points = {};\n\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n      }\n    },\n    currentTimestamp: function currentTimestamp() {\n      return performanceNow();\n    },\n    getTimespans: function getTimespans() {\n      return this._timespans;\n    },\n    hasTimespan: function hasTimespan(key) {\n      return !!this._timespans[key];\n    },\n    logTimespans: function logTimespans() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          if (this._timespans[_key2].totalTime) {\n            infoLog(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n      }\n    },\n    addTimespans: function addTimespans(newTimespans, labels) {\n      for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n        var label = labels[ii / 2];\n        this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);\n      }\n    },\n    setExtra: function setExtra(key, value) {\n      if (this._extras[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n\n        return;\n      }\n\n      this._extras[key] = value;\n    },\n    getExtras: function getExtras() {\n      return this._extras;\n    },\n    removeExtra: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    },\n    logExtras: function logExtras() {\n      if (PRINT_TO_CONSOLE) {\n        infoLog(this._extras);\n      }\n    },\n    markPoint: function markPoint(key, timestamp) {\n      if (this._points[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n\n        return;\n      }\n\n      this._points[key] = timestamp != null ? timestamp : performanceNow();\n    },\n    getPoints: function getPoints() {\n      return this._points;\n    },\n    logPoints: function logPoints() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key3 in this._points) {\n          infoLog(_key3 + ': ' + this._points[_key3] + 'ms');\n        }\n      }\n    },\n    logEverything: function logEverything() {\n      this.logTimespans();\n      this.logExtras();\n      this.logPoints();\n    }\n  };\n  return result;\n}\n\nmodule.exports = createPerformanceLogger;","map":{"version":3,"names":["Systrace","require","infoLog","performanceNow","global","nativeQPLTimestamp","nativePerformanceNow","_cookies","PRINT_TO_CONSOLE","createPerformanceLogger","result","_timespans","_extras","_points","addTimespan","key","lengthInMs","description","__DEV__","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","options","timespan","endTime","update","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","ii","l","length","label","setExtra","value","currentValue","attemptedValue","getExtras","removeExtra","logExtras","markPoint","timestamp","getPoints","logPoints","logEverything","module","exports"],"sources":["D:/проекты летом 2022/loginapp2/mobile/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst Systrace = require('../Performance/Systrace');\n\nconst infoLog = require('./infoLog');\nconst performanceNow =\n  global.nativeQPLTimestamp ||\n  global.nativePerformanceNow ||\n  require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n  ...\n};\n\nexport type IPerformanceLogger = {\n  addTimespan(string, number, string | void): void,\n  startTimespan(string, string | void): void,\n  stopTimespan(string, options?: {update?: boolean}): void,\n  clear(): void,\n  clearCompleted(): void,\n  clearExceptTimespans(Array<string>): void,\n  currentTimestamp(): number,\n  getTimespans(): {[key: string]: Timespan, ...},\n  hasTimespan(string): boolean,\n  logTimespans(): void,\n  addTimespans(Array<number>, Array<string>): void,\n  setExtra(string, any): void,\n  getExtras(): {[key: string]: any, ...},\n  removeExtra(string): ?any,\n  logExtras(): void,\n  markPoint(string, number | void): void,\n  getPoints(): {[key: string]: number, ...},\n  logPoints(): void,\n  logEverything(): void,\n  ...\n};\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nfunction createPerformanceLogger(): IPerformanceLogger {\n  const result: IPerformanceLogger & {\n    _timespans: {[key: string]: Timespan, ...},\n    _extras: {[key: string]: any, ...},\n    _points: {[key: string]: number, ...},\n    ...\n  } = {\n    _timespans: {},\n    _extras: {},\n    _points: {},\n\n    addTimespan(key: string, lengthInMs: number, description?: string) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to add a timespan that already exists ',\n            key,\n          );\n        }\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        totalTime: lengthInMs,\n      };\n    },\n\n    startTimespan(key: string, description?: string) {\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to start a timespan that already exists ',\n            key,\n          );\n        }\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        startTime: performanceNow(),\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n    },\n\n    stopTimespan(key: string, options?: {update?: boolean}) {\n      const timespan = this._timespans[key];\n      if (!timespan || !timespan.startTime) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to end a timespan that has not started ',\n            key,\n          );\n        }\n        return;\n      }\n      if (timespan.endTime && !options?.update) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to end a timespan that has already ended ',\n            key,\n          );\n        }\n        return;\n      }\n\n      timespan.endTime = performanceNow();\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n    },\n\n    clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    },\n\n    clearCompleted() {\n      for (const key in this._timespans) {\n        if (this._timespans[key].totalTime) {\n          delete this._timespans[key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    },\n\n    clearExceptTimespans(keys: Array<string>) {\n      this._timespans = Object.keys(this._timespans).reduce(function(\n        previous,\n        key,\n      ) {\n        if (keys.indexOf(key) !== -1) {\n          previous[key] = this._timespans[key];\n        }\n        return previous;\n      },\n      {});\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n      }\n    },\n\n    currentTimestamp() {\n      return performanceNow();\n    },\n\n    getTimespans() {\n      return this._timespans;\n    },\n\n    hasTimespan(key: string) {\n      return !!this._timespans[key];\n    },\n\n    logTimespans() {\n      if (PRINT_TO_CONSOLE) {\n        for (const key in this._timespans) {\n          if (this._timespans[key].totalTime) {\n            infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n          }\n        }\n      }\n    },\n\n    addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n      for (let ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n        const label = labels[ii / 2];\n        this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);\n      }\n    },\n\n    setExtra(key: string, value: any) {\n      if (this._extras[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to set an extra that already exists ',\n            {key, currentValue: this._extras[key], attemptedValue: value},\n          );\n        }\n        return;\n      }\n      this._extras[key] = value;\n    },\n\n    getExtras() {\n      return this._extras;\n    },\n\n    removeExtra(key: string): ?any {\n      const value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    },\n\n    logExtras() {\n      if (PRINT_TO_CONSOLE) {\n        infoLog(this._extras);\n      }\n    },\n\n    markPoint(key: string, timestamp?: number) {\n      if (this._points[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to mark a point that has been already logged ',\n            key,\n          );\n        }\n        return;\n      }\n      this._points[key] = timestamp ?? performanceNow();\n    },\n\n    getPoints() {\n      return this._points;\n    },\n\n    logPoints() {\n      if (PRINT_TO_CONSOLE) {\n        for (const key in this._points) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    },\n\n    logEverything() {\n      this.logTimespans();\n      this.logExtras();\n      this.logPoints();\n    },\n  };\n  return result;\n}\n\nmodule.exports = createPerformanceLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}