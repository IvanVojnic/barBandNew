{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport NotificationScheduler from \"./NotificationScheduler\";\nimport { parseTrigger } from \"./scheduleNotificationAsync\";\nexport default function getNextTriggerDateAsync(trigger) {\n  return _regeneratorRuntime.async(function getNextTriggerDateAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        if (NotificationScheduler.getNextTriggerDateAsync) {\n          _context.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('ExpoNotifications', 'getNextTriggerDateAsync');\n      case 2:\n        _context.next = 4;\n        return _regeneratorRuntime.awrap(NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger)));\n      case 4:\n        return _context.abrupt(\"return\", _context.sent);\n      case 5:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":";AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,qBAAqB;AAE5B,SAASC,YAAY;AAErB,eAAe,SAAeC,uBAAuB,CACnDC,OAA4C;EAAA;IAAA;MAAA;QAAA,IAEvCH,qBAAqB,CAACE,uBAAuB;UAAA;UAAA;QAAA;QAAA,MAC1C,IAAIH,mBAAmB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC;MAAA;QAAA;QAAA,iCAGlEC,qBAAqB,CAACE,uBAAuB,CAACD,YAAY,CAACE,OAAO,CAAC,CAAC;MAAA;QAAA;MAAA;MAAA;QAAA;IAAA;EAAA;AAAA","names":["UnavailabilityError","NotificationScheduler","parseTrigger","getNextTriggerDateAsync","trigger"],"sourceRoot":"","sources":["../src/getNextTriggerDateAsync.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\nimport { SchedulableNotificationTriggerInput } from './Notifications.types';\nimport { parseTrigger } from './scheduleNotificationAsync';\n\nexport default async function getNextTriggerDateAsync(\n  trigger: SchedulableNotificationTriggerInput\n): Promise<number | null> {\n  if (!NotificationScheduler.getNextTriggerDateAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getNextTriggerDateAsync');\n  }\n\n  return await NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger));\n}\n"]},"metadata":{},"sourceType":"module"}